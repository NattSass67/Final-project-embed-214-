
My-final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006448  08006448  00016448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064d0  080064d0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080064d0  080064d0  000164d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064d8  080064d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064d8  080064d8  000164d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064dc  080064dc  000164dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080064e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  20000070  08006550  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08006550  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eedc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f01  00000000  00000000  0002ef7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  00030e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce0  00000000  00000000  00031c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e76  00000000  00000000  000328f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f3f3  00000000  00000000  0004976e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097e16  00000000  00000000  00058b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0977  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e7c  00000000  00000000  000f09c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006430 	.word	0x08006430

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08006430 	.word	0x08006430

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b974 	b.w	8000d5c <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468e      	mov	lr, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14d      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	d969      	bls.n	8000b74 <__udivmoddi4+0xe8>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b152      	cbz	r2, 8000abc <__udivmoddi4+0x30>
 8000aa6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aaa:	f1c2 0120 	rsb	r1, r2, #32
 8000aae:	fa20 f101 	lsr.w	r1, r0, r1
 8000ab2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aba:	4094      	lsls	r4, r2
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	0c21      	lsrs	r1, r4, #16
 8000ac2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ac6:	fa1f f78c 	uxth.w	r7, ip
 8000aca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ace:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ad2:	fb06 f107 	mul.w	r1, r6, r7
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ae2:	f080 811f 	bcs.w	8000d24 <__udivmoddi4+0x298>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 811c 	bls.w	8000d24 <__udivmoddi4+0x298>
 8000aec:	3e02      	subs	r6, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af8:	fb08 3310 	mls	r3, r8, r0, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb00 f707 	mul.w	r7, r0, r7
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x92>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b10:	f080 810a 	bcs.w	8000d28 <__udivmoddi4+0x29c>
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	f240 8107 	bls.w	8000d28 <__udivmoddi4+0x29c>
 8000b1a:	4464      	add	r4, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	1be4      	subs	r4, r4, r7
 8000b24:	2600      	movs	r6, #0
 8000b26:	b11d      	cbz	r5, 8000b30 <__udivmoddi4+0xa4>
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d909      	bls.n	8000b4e <__udivmoddi4+0xc2>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	f000 80ef 	beq.w	8000d1e <__udivmoddi4+0x292>
 8000b40:	2600      	movs	r6, #0
 8000b42:	e9c5 0100 	strd	r0, r1, [r5]
 8000b46:	4630      	mov	r0, r6
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	fab3 f683 	clz	r6, r3
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d14a      	bne.n	8000bec <__udivmoddi4+0x160>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xd4>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80f9 	bhi.w	8000d52 <__udivmoddi4+0x2c6>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb61 0303 	sbc.w	r3, r1, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	469e      	mov	lr, r3
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e0      	beq.n	8000b30 <__udivmoddi4+0xa4>
 8000b6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b72:	e7dd      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000b74:	b902      	cbnz	r2, 8000b78 <__udivmoddi4+0xec>
 8000b76:	deff      	udf	#255	; 0xff
 8000b78:	fab2 f282 	clz	r2, r2
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	f040 8092 	bne.w	8000ca6 <__udivmoddi4+0x21a>
 8000b82:	eba1 010c 	sub.w	r1, r1, ip
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2601      	movs	r6, #1
 8000b90:	0c20      	lsrs	r0, r4, #16
 8000b92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b96:	fb07 1113 	mls	r1, r7, r3, r1
 8000b9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ba2:	4288      	cmp	r0, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x12c>
 8000ba6:	eb1c 0101 	adds.w	r1, ip, r1
 8000baa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x12a>
 8000bb0:	4288      	cmp	r0, r1
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2c0>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	1a09      	subs	r1, r1, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x156>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x154>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2ca>
 8000be0:	4608      	mov	r0, r1
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bea:	e79c      	b.n	8000b26 <__udivmoddi4+0x9a>
 8000bec:	f1c6 0720 	rsb	r7, r6, #32
 8000bf0:	40b3      	lsls	r3, r6
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000c02:	431c      	orrs	r4, r3
 8000c04:	40f9      	lsrs	r1, r7
 8000c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c12:	0c20      	lsrs	r0, r4, #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fb09 1118 	mls	r1, r9, r8, r1
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	fb08 f00e 	mul.w	r0, r8, lr
 8000c24:	4288      	cmp	r0, r1
 8000c26:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b8>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2bc>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2bc>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1a09      	subs	r1, r1, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	458e      	cmp	lr, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1e2>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2b4>
 8000c66:	458e      	cmp	lr, r1
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2b4>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c72:	fba0 9402 	umull	r9, r4, r0, r2
 8000c76:	eba1 010e 	sub.w	r1, r1, lr
 8000c7a:	42a1      	cmp	r1, r4
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46a6      	mov	lr, r4
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x2a4>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x2a0>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x212>
 8000c86:	ebb3 0208 	subs.w	r2, r3, r8
 8000c8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c92:	fa22 f306 	lsr.w	r3, r2, r6
 8000c96:	40f1      	lsrs	r1, r6
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	40d8      	lsrs	r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc8:	0c0b      	lsrs	r3, r1, #16
 8000cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cce:	fb00 f60e 	mul.w	r6, r0, lr
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x260>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce4:	429e      	cmp	r6, r3
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cf4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x28a>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000d12:	3e02      	subs	r6, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	1ac9      	subs	r1, r1, r3
 8000d18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0x104>
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e705      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e3      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6f8      	b.n	8000b1e <__udivmoddi4+0x92>
 8000d2c:	454b      	cmp	r3, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f8>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f8>
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x28a>
 8000d40:	4620      	mov	r0, r4
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1e2>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x260>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b8>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	4461      	add	r1, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x12c>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e709      	b.n	8000b6a <__udivmoddi4+0xde>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x156>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <delay_us>:
int32_t hx711_value;
static uint8_t GAIN;	//Gain for clock cycles.


void delay_us (uint16_t us) //delay function
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	80fb      	strh	r3, [r7, #6]
__HAL_TIM_SET_COUNTER(&htim1,0);  // setting the delay counter to 0.
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <delay_us+0x30>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	625a      	str	r2, [r3, #36]	; 0x24
while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // while loop till the counter reaches the delay given (us).
 8000d72:	bf00      	nop
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <delay_us+0x30>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d3f9      	bcc.n	8000d74 <delay_us+0x14>
}
 8000d80:	bf00      	nop
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	200000d4 	.word	0x200000d4

08000d94 <hx711_powerUp>:

void hx711_powerUp(void) //Power up function
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET); //writing to the pin and setting it to 0.
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d9e:	4802      	ldr	r0, [pc, #8]	; (8000da8 <hx711_powerUp+0x14>)
 8000da0:	f002 faca 	bl	8003338 <HAL_GPIO_WritePin>
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40020400 	.word	0x40020400

08000dac <hx711_setGain>:
void hx711_setGain(uint8_t gain)  //the values should be 32, 64 or 128
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	if(gain < 64) GAIN = 2; //32, channel B
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2b3f      	cmp	r3, #63	; 0x3f
 8000dba:	d803      	bhi.n	8000dc4 <hx711_setGain+0x18>
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <hx711_setGain+0x3c>)
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	701a      	strb	r2, [r3, #0]
	else if(gain < 128) GAIN = 3; //64, channel A
	else GAIN = 1; //128, channel A
}
 8000dc2:	e00a      	b.n	8000dda <hx711_setGain+0x2e>
	else if(gain < 128) GAIN = 3; //64, channel A
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	db03      	blt.n	8000dd4 <hx711_setGain+0x28>
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <hx711_setGain+0x3c>)
 8000dce:	2203      	movs	r2, #3
 8000dd0:	701a      	strb	r2, [r3, #0]
}
 8000dd2:	e002      	b.n	8000dda <hx711_setGain+0x2e>
	else GAIN = 1; //128, channel A
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <hx711_setGain+0x3c>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	701a      	strb	r2, [r3, #0]
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000308 	.word	0x20000308

08000dec <hx711_init>:


void hx711_init(void) //initializes the hx711 module by calling 2 functions.
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  hx711_setGain(128); //setting gain to 128, as this was our best result after trying with other gains.
 8000df0:	2080      	movs	r0, #128	; 0x80
 8000df2:	f7ff ffdb 	bl	8000dac <hx711_setGain>
	hx711_powerUp(); //power up the hx711 module.
 8000df6:	f7ff ffcd 	bl	8000d94 <hx711_powerUp>
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <hx711_get_value>:



int32_t hx711_get_value(void) //getting the weight from the module.
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
	uint32_t data = 0; //the data (weight) is firstly set to 0.
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
	uint8_t dout; // this is to show whether at this bit, if theres a number that should be recorded.
	int32_t filler; //to fill the rest of the 32 bits.
	int32_t ret_value; //final value to return after adding the filling and the data6 together.

	for (uint8_t i = 0; i < 24; i++) //read 24 bit data + set gain and start next conversion
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	73fb      	strb	r3, [r7, #15]
 8000e0e:	e024      	b.n	8000e5a <hx711_get_value+0x5a>
	{

		HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET); //set the clock pin to 1.
 8000e10:	2201      	movs	r2, #1
 8000e12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e16:	482b      	ldr	r0, [pc, #172]	; (8000ec4 <hx711_get_value+0xc4>)
 8000e18:	f002 fa8e 	bl	8003338 <HAL_GPIO_WritePin>
		delay_us(1); //delay
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f7ff ff9f 	bl	8000d60 <delay_us>
			dout = HAL_GPIO_ReadPin(DT_PORT,DT_PIN); //read from the dout pin in variable dout.
 8000e22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e26:	4827      	ldr	r0, [pc, #156]	; (8000ec4 <hx711_get_value+0xc4>)
 8000e28:	f002 fa6e 	bl	8003308 <HAL_GPIO_ReadPin>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	70fb      	strb	r3, [r7, #3]
			data = data << 1; //shift the data by 1 to make sure we are in correct position depending on the counter.
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	617b      	str	r3, [r7, #20]
			if (dout) //if this bit has an output (value of 1) .
 8000e36:	78fb      	ldrb	r3, [r7, #3]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d002      	beq.n	8000e42 <hx711_get_value+0x42>
			{
				data++; //it sets the data value at this position as 1 as well.
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	617b      	str	r3, [r7, #20]
			}
		HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET); //set clock pin to 0.
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e48:	481e      	ldr	r0, [pc, #120]	; (8000ec4 <hx711_get_value+0xc4>)
 8000e4a:	f002 fa75 	bl	8003338 <HAL_GPIO_WritePin>
		delay_us(1); //delay
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f7ff ff86 	bl	8000d60 <delay_us>
	for (uint8_t i = 0; i < 24; i++) //read 24 bit data + set gain and start next conversion
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	3301      	adds	r3, #1
 8000e58:	73fb      	strb	r3, [r7, #15]
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	2b17      	cmp	r3, #23
 8000e5e:	d9d7      	bls.n	8000e10 <hx711_get_value+0x10>
	}

	for( int i = 0; i < GAIN; i ++ ) //this for loop is for the gain, to add more clock cycles based on the gain.
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	e014      	b.n	8000e90 <hx711_get_value+0x90>
	{
		HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET); //set clock pin to 1.
 8000e66:	2201      	movs	r2, #1
 8000e68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e6c:	4815      	ldr	r0, [pc, #84]	; (8000ec4 <hx711_get_value+0xc4>)
 8000e6e:	f002 fa63 	bl	8003338 <HAL_GPIO_WritePin>
		delay_us(1); //delay
 8000e72:	2001      	movs	r0, #1
 8000e74:	f7ff ff74 	bl	8000d60 <delay_us>
		HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET); //set clock pin to 0.
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e7e:	4811      	ldr	r0, [pc, #68]	; (8000ec4 <hx711_get_value+0xc4>)
 8000e80:	f002 fa5a 	bl	8003338 <HAL_GPIO_WritePin>
		delay_us(1); //delay, here we are making a clock cycle.
 8000e84:	2001      	movs	r0, #1
 8000e86:	f7ff ff6b 	bl	8000d60 <delay_us>
	for( int i = 0; i < GAIN; i ++ ) //this for loop is for the gain, to add more clock cycles based on the gain.
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <hx711_get_value+0xc8>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	dbe4      	blt.n	8000e66 <hx711_get_value+0x66>
	}

	if( data & 0x800000 ) //here we are checking if theres values in the 24 bits by anding.
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <hx711_get_value+0xae>
		filler = 0xFF000000; //if there are values we add 1's to the last 8 bits which are needed as this is a 32-bit adc.
 8000ea6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	e001      	b.n	8000eb2 <hx711_get_value+0xb2>
	else
		filler = 0x00000000; //however, if nothing is in the data we just add 0's.
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]

	ret_value = filler + data; //the return value is the addition of the data with the filler to have the 32-bits.
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	607b      	str	r3, [r7, #4]
	return ret_value; //returning the value to be printed.
 8000eba:	687b      	ldr	r3, [r7, #4]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40020400 	.word	0x40020400
 8000ec8:	20000308 	.word	0x20000308

08000ecc <hx711_is_ready>:

uint8_t hx711_is_ready(void) //making sure that the HX711 module is ready
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(DT_PORT,DT_PIN) == GPIO_PIN_RESET; //reading a value from it, the reseting it.
 8000ed0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ed4:	4805      	ldr	r0, [pc, #20]	; (8000eec <hx711_is_ready+0x20>)
 8000ed6:	f002 fa17 	bl	8003308 <HAL_GPIO_ReadPin>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	bf0c      	ite	eq
 8000ee0:	2301      	moveq	r3, #1
 8000ee2:	2300      	movne	r3, #0
 8000ee4:	b2db      	uxtb	r3, r3
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40020400 	.word	0x40020400

08000ef0 <HAL_UART_RxCpltCallback>:

uint8_t rxBuffer[1];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart2, rxBuffer, sizeof(rxBuffer),1000);
 8000ef8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efc:	2201      	movs	r2, #1
 8000efe:	4906      	ldr	r1, [pc, #24]	; (8000f18 <HAL_UART_RxCpltCallback+0x28>)
 8000f00:	4806      	ldr	r0, [pc, #24]	; (8000f1c <HAL_UART_RxCpltCallback+0x2c>)
 8000f02:	f003 fd90 	bl	8004a26 <HAL_UART_Transmit>

        //rxDataAvailable = 1;
        //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
        HAL_UART_Receive_IT(&huart6, rxBuffer, sizeof(rxBuffer));
 8000f06:	2201      	movs	r2, #1
 8000f08:	4903      	ldr	r1, [pc, #12]	; (8000f18 <HAL_UART_RxCpltCallback+0x28>)
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <HAL_UART_RxCpltCallback+0x30>)
 8000f0c:	f003 fe62 	bl	8004bd4 <HAL_UART_Receive_IT>


}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	2000030c 	.word	0x2000030c
 8000f1c:	200001a8 	.word	0x200001a8
 8000f20:	200001ec 	.word	0x200001ec

08000f24 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

        //txDataSent = 1;

}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	b090      	sub	sp, #64	; 0x40
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3e:	f000 ff7d 	bl	8001e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f42:	f000 f999 	bl	8001278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f46:	f000 fbbd 	bl	80016c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f4a:	f000 fb93 	bl	8001674 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f4e:	f000 fb3d 	bl	80015cc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000f52:	f000 fb11 	bl	8001578 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000f56:	f000 fa99 	bl	800148c <MX_TIM2_Init>
  MX_ADC1_Init();
 8000f5a:	f000 f9f5 	bl	8001348 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000f5e:	f000 fa45 	bl	80013ec <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8000f62:	f000 fb5d 	bl	8001620 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000f66:	48b2      	ldr	r0, [pc, #712]	; (8001230 <main+0x2f8>)
 8000f68:	f002 fee8 	bl	8003d3c <HAL_TIM_Base_Start>
   HAL_UART_Receive_IT(&huart6, rxBuffer, 1);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	49b1      	ldr	r1, [pc, #708]	; (8001234 <main+0x2fc>)
 8000f70:	48b1      	ldr	r0, [pc, #708]	; (8001238 <main+0x300>)
 8000f72:	f003 fe2f 	bl	8004bd4 <HAL_UART_Receive_IT>
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f76:	2100      	movs	r1, #0
 8000f78:	48b0      	ldr	r0, [pc, #704]	; (800123c <main+0x304>)
 8000f7a:	f002 ff93 	bl	8003ea4 <HAL_TIM_PWM_Start>
   HAL_Delay(500);
 8000f7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f82:	f000 ffcd 	bl	8001f20 <HAL_Delay>
   TIM2->CCR1 =1500;
 8000f86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f8a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000f8e:	635a      	str	r2, [r3, #52]	; 0x34


   uint8_t buffer[8];

    int count=0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	63fb      	str	r3, [r7, #60]	; 0x3c

    int check=0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	63bb      	str	r3, [r7, #56]	; 0x38
    hx711_init();
 8000f98:	f7ff ff28 	bl	8000dec <hx711_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(check==1){
 8000f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d111      	bne.n	8000fc6 <main+0x8e>
		 //uint8_t sends[1]="M";
		 uint8_t sends[16]="METAL-detected\r\n";
 8000fa2:	4ba7      	ldr	r3, [pc, #668]	; (8001240 <main+0x308>)
 8000fa4:	f107 041c 	add.w	r4, r7, #28
 8000fa8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000faa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 HAL_UART_Transmit_IT(&huart6, sends, sizeof(sends));
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	2210      	movs	r2, #16
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	48a0      	ldr	r0, [pc, #640]	; (8001238 <main+0x300>)
 8000fb8:	f003 fdc7 	bl	8004b4a <HAL_UART_Transmit_IT>
		 HAL_Delay(100);
 8000fbc:	2064      	movs	r0, #100	; 0x64
 8000fbe:	f000 ffaf 	bl	8001f20 <HAL_Delay>
		 check=0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	63bb      	str	r3, [r7, #56]	; 0x38

	  }
	  if(check==2){
 8000fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d113      	bne.n	8000ff4 <main+0xbc>
		  //uint8_t sends[1]="P";
		  uint8_t sends[18]="PLASTIC-detected\r\n";
 8000fcc:	4b9d      	ldr	r3, [pc, #628]	; (8001244 <main+0x30c>)
 8000fce:	f107 0408 	add.w	r4, r7, #8
 8000fd2:	461d      	mov	r5, r3
 8000fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd8:	682b      	ldr	r3, [r5, #0]
 8000fda:	8023      	strh	r3, [r4, #0]
		  HAL_UART_Transmit_IT(&huart6, sends, sizeof(sends));
 8000fdc:	f107 0308 	add.w	r3, r7, #8
 8000fe0:	2212      	movs	r2, #18
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4894      	ldr	r0, [pc, #592]	; (8001238 <main+0x300>)
 8000fe6:	f003 fdb0 	bl	8004b4a <HAL_UART_Transmit_IT>
		  HAL_Delay(100);
 8000fea:	2064      	movs	r0, #100	; 0x64
 8000fec:	f000 ff98 	bl	8001f20 <HAL_Delay>
		  check=0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	63bb      	str	r3, [r7, #56]	; 0x38
	  if(check==3){

	  }


		  if( hx711_is_ready()) //if the HX711 module is ready.
 8000ff4:	f7ff ff6a 	bl	8000ecc <hx711_is_ready>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00d      	beq.n	800101a <main+0xe2>
			  {
			 // HAL_UART_Transmit(&huart2, "ready", 5, HAL_MAX_DELAY);
			  hx711_value = hx711_get_value()/900-267; //we store the value coming from the get value function.
 8000ffe:	f7ff feff 	bl	8000e00 <hx711_get_value>
 8001002:	4603      	mov	r3, r0
 8001004:	4a90      	ldr	r2, [pc, #576]	; (8001248 <main+0x310>)
 8001006:	fb82 1203 	smull	r1, r2, r2, r3
 800100a:	441a      	add	r2, r3
 800100c:	1252      	asrs	r2, r2, #9
 800100e:	17db      	asrs	r3, r3, #31
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	f2a3 130b 	subw	r3, r3, #267	; 0x10b
 8001016:	4a8d      	ldr	r2, [pc, #564]	; (800124c <main+0x314>)
 8001018:	6013      	str	r3, [r2, #0]
		 //	  printf("Weight: %d g \n\r", (((hx711_value)/1000)+263)); //printing the weight after we calibrated it manually.
			  }

	 	  if (hx711_value >= 11){
 800101a:	4b8c      	ldr	r3, [pc, #560]	; (800124c <main+0x314>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b0a      	cmp	r3, #10
 8001020:	dd6c      	ble.n	80010fc <main+0x1c4>
	 		 //HAL_UART_Transmit(&huart2, "yes", 3, HAL_MAX_DELAY);
	 		  HAL_ADC_Start(&hadc1);
 8001022:	488b      	ldr	r0, [pc, #556]	; (8001250 <main+0x318>)
 8001024:	f000 ffe4 	bl	8001ff0 <HAL_ADC_Start>
	 	  	  	if(HAL_ADC_PollForConversion(&hadc1,1000)==HAL_OK){
 8001028:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800102c:	4888      	ldr	r0, [pc, #544]	; (8001250 <main+0x318>)
 800102e:	f001 f893 	bl	8002158 <HAL_ADC_PollForConversion>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d158      	bne.n	80010ea <main+0x1b2>
	 	  	  		readVal=HAL_ADC_GetValue(&hadc1);
 8001038:	4885      	ldr	r0, [pc, #532]	; (8001250 <main+0x318>)
 800103a:	f001 f918 	bl	800226e <HAL_ADC_GetValue>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	4b84      	ldr	r3, [pc, #528]	; (8001254 <main+0x31c>)
 8001044:	601a      	str	r2, [r3, #0]
	 	  	  		int i=0;
 8001046:	2300      	movs	r3, #0
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
	 	  	  		while(i<5){
 800104a:	e01f      	b.n	800108c <main+0x154>

	 	  	  			HAL_ADC_Start(&hadc1);
 800104c:	4880      	ldr	r0, [pc, #512]	; (8001250 <main+0x318>)
 800104e:	f000 ffcf 	bl	8001ff0 <HAL_ADC_Start>
	 	  	  			 if(HAL_ADC_PollForConversion(&hadc1,1000)==HAL_OK){
 8001052:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001056:	487e      	ldr	r0, [pc, #504]	; (8001250 <main+0x318>)
 8001058:	f001 f87e 	bl	8002158 <HAL_ADC_PollForConversion>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d114      	bne.n	800108c <main+0x154>
	 	  	  				 if(HAL_ADC_GetValue(&hadc1)<readVal){
 8001062:	487b      	ldr	r0, [pc, #492]	; (8001250 <main+0x318>)
 8001064:	f001 f903 	bl	800226e <HAL_ADC_GetValue>
 8001068:	4603      	mov	r3, r0
 800106a:	4a7a      	ldr	r2, [pc, #488]	; (8001254 <main+0x31c>)
 800106c:	6812      	ldr	r2, [r2, #0]
 800106e:	4293      	cmp	r3, r2
 8001070:	d206      	bcs.n	8001080 <main+0x148>
	 	  	  					readVal=HAL_ADC_GetValue(&hadc1);
 8001072:	4877      	ldr	r0, [pc, #476]	; (8001250 <main+0x318>)
 8001074:	f001 f8fb 	bl	800226e <HAL_ADC_GetValue>
 8001078:	4603      	mov	r3, r0
 800107a:	461a      	mov	r2, r3
 800107c:	4b75      	ldr	r3, [pc, #468]	; (8001254 <main+0x31c>)
 800107e:	601a      	str	r2, [r3, #0]
	 	  	  				 }
//	 	  	  				sprintf(buffer,"%hu\r\n",readVal);
//	 	  	  				HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
	 	  	  			  	  i++;
 8001080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001082:	3301      	adds	r3, #1
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
	 	  	  			  	  HAL_Delay(50);
 8001086:	2032      	movs	r0, #50	; 0x32
 8001088:	f000 ff4a 	bl	8001f20 <HAL_Delay>
	 	  	  		while(i<5){
 800108c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800108e:	2b04      	cmp	r3, #4
 8001090:	dddc      	ble.n	800104c <main+0x114>
	 	  	  			 }
	 	  	  		}
	 	  	  		if(readVal<2000){
 8001092:	4b70      	ldr	r3, [pc, #448]	; (8001254 <main+0x31c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800109a:	da0b      	bge.n	80010b4 <main+0x17c>
	 	  	  			HAL_Delay(500);
 800109c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010a0:	f000 ff3e 	bl	8001f20 <HAL_Delay>
	 	  	  			TIM2->CCR1 = 1000; //500 is 0
 80010a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010ac:	635a      	str	r2, [r3, #52]	; 0x34
	 //	  	  			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_SET);
	 	  	  			check=1;
 80010ae:	2301      	movs	r3, #1
 80010b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80010b2:	e00a      	b.n	80010ca <main+0x192>


	 	  	  		}
	 	  	  		else{
	 	  	  			HAL_Delay(500);
 80010b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010b8:	f000 ff32 	bl	8001f20 <HAL_Delay>
	 	  	  			TIM2->CCR1 = 2000;
 80010bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010c0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010c4:	635a      	str	r2, [r3, #52]	; 0x34
	 	  	  			check=2;
 80010c6:	2302      	movs	r3, #2
 80010c8:	63bb      	str	r3, [r7, #56]	; 0x38
	 	  	  		}
	 	  	  		sprintf(buffer,"%hu\r\n",readVal);
 80010ca:	4b62      	ldr	r3, [pc, #392]	; (8001254 <main+0x31c>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d2:	4961      	ldr	r1, [pc, #388]	; (8001258 <main+0x320>)
 80010d4:	4618      	mov	r0, r3
 80010d6:	f004 fd3d 	bl	8005b54 <siprintf>
	 	  	  		HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 80010da:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	2208      	movs	r2, #8
 80010e4:	485d      	ldr	r0, [pc, #372]	; (800125c <main+0x324>)
 80010e6:	f003 fc9e 	bl	8004a26 <HAL_UART_Transmit>
	 	  	  	}
	 	  	  HAL_Delay(1500);
 80010ea:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80010ee:	f000 ff17 	bl	8001f20 <HAL_Delay>
	 	  	  TIM2->CCR1 = 1500;
 80010f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010f6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80010fa:	635a      	str	r2, [r3, #52]	; 0x34
//			sprintf(buffer,"%hu\r\n",readVal);
//			HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
//		}

	 	  //ultrasonic
	 	 HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80010fc:	2201      	movs	r2, #1
 80010fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001102:	4857      	ldr	r0, [pc, #348]	; (8001260 <main+0x328>)
 8001104:	f002 f918 	bl	8003338 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001108:	4b49      	ldr	r3, [pc, #292]	; (8001230 <main+0x2f8>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2200      	movs	r2, #0
 800110e:	625a      	str	r2, [r3, #36]	; 0x24
		  while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8001110:	bf00      	nop
 8001112:	4b47      	ldr	r3, [pc, #284]	; (8001230 <main+0x2f8>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001118:	2b09      	cmp	r3, #9
 800111a:	d9fa      	bls.n	8001112 <main+0x1da>
		  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 800111c:	2200      	movs	r2, #0
 800111e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001122:	484f      	ldr	r0, [pc, #316]	; (8001260 <main+0x328>)
 8001124:	f002 f908 	bl	8003338 <HAL_GPIO_WritePin>

		  pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8001128:	f000 feee 	bl	8001f08 <HAL_GetTick>
 800112c:	4603      	mov	r3, r0
 800112e:	4a4d      	ldr	r2, [pc, #308]	; (8001264 <main+0x32c>)
 8001130:	6013      	str	r3, [r2, #0]
		  // wait for the echo pin to go high
		  while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8001132:	bf00      	nop
 8001134:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001138:	4849      	ldr	r0, [pc, #292]	; (8001260 <main+0x328>)
 800113a:	f002 f8e5 	bl	8003308 <HAL_GPIO_ReadPin>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d108      	bne.n	8001156 <main+0x21e>
 8001144:	4b47      	ldr	r3, [pc, #284]	; (8001264 <main+0x32c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f103 040a 	add.w	r4, r3, #10
 800114c:	f000 fedc 	bl	8001f08 <HAL_GetTick>
 8001150:	4603      	mov	r3, r0
 8001152:	429c      	cmp	r4, r3
 8001154:	d8ee      	bhi.n	8001134 <main+0x1fc>
		  Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8001156:	4b36      	ldr	r3, [pc, #216]	; (8001230 <main+0x2f8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115c:	4a42      	ldr	r2, [pc, #264]	; (8001268 <main+0x330>)
 800115e:	6013      	str	r3, [r2, #0]

		  pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8001160:	f000 fed2 	bl	8001f08 <HAL_GetTick>
 8001164:	4603      	mov	r3, r0
 8001166:	4a3f      	ldr	r2, [pc, #252]	; (8001264 <main+0x32c>)
 8001168:	6013      	str	r3, [r2, #0]
		  // wait for the echo pin to go low
		  while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 800116a:	bf00      	nop
 800116c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001170:	483b      	ldr	r0, [pc, #236]	; (8001260 <main+0x328>)
 8001172:	f002 f8c9 	bl	8003308 <HAL_GPIO_ReadPin>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d008      	beq.n	800118e <main+0x256>
 800117c:	4b39      	ldr	r3, [pc, #228]	; (8001264 <main+0x32c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001184:	f000 fec0 	bl	8001f08 <HAL_GetTick>
 8001188:	4603      	mov	r3, r0
 800118a:	429c      	cmp	r4, r3
 800118c:	d8ee      	bhi.n	800116c <main+0x234>
		  Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 800118e:	4b28      	ldr	r3, [pc, #160]	; (8001230 <main+0x2f8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001194:	4a35      	ldr	r2, [pc, #212]	; (800126c <main+0x334>)
 8001196:	6013      	str	r3, [r2, #0]

		  Distance = (Value2-Value1)* 0.034/2;
 8001198:	4b34      	ldr	r3, [pc, #208]	; (800126c <main+0x334>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b32      	ldr	r3, [pc, #200]	; (8001268 <main+0x330>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f9ae 	bl	8000504 <__aeabi_ui2d>
 80011a8:	a31f      	add	r3, pc, #124	; (adr r3, 8001228 <main+0x2f0>)
 80011aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ae:	f7ff fa23 	bl	80005f8 <__aeabi_dmul>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4610      	mov	r0, r2
 80011b8:	4619      	mov	r1, r3
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011c2:	f7ff fb43 	bl	800084c <__aeabi_ddiv>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4610      	mov	r0, r2
 80011cc:	4619      	mov	r1, r3
 80011ce:	f7ff fc25 	bl	8000a1c <__aeabi_d2uiz>
 80011d2:	4603      	mov	r3, r0
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	4b26      	ldr	r3, [pc, #152]	; (8001270 <main+0x338>)
 80011d8:	801a      	strh	r2, [r3, #0]
		  HAL_Delay(50);
 80011da:	2032      	movs	r0, #50	; 0x32
 80011dc:	f000 fea0 	bl	8001f20 <HAL_Delay>
		  if(Distance>20){
 80011e0:	4b23      	ldr	r3, [pc, #140]	; (8001270 <main+0x338>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	2b14      	cmp	r3, #20
 80011e6:	d902      	bls.n	80011ee <main+0x2b6>
			  count=0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011ec:	e002      	b.n	80011f4 <main+0x2bc>
		  }
		  else{
			  count++;
 80011ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011f0:	3301      	adds	r3, #1
 80011f2:	63fb      	str	r3, [r7, #60]	; 0x3c
		  }

		  if(count>=5){
 80011f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	dd11      	ble.n	800121e <main+0x2e6>
			 uint8_t sendt[6]="FULL\r\n";
 80011fa:	4a1e      	ldr	r2, [pc, #120]	; (8001274 <main+0x33c>)
 80011fc:	463b      	mov	r3, r7
 80011fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001202:	6018      	str	r0, [r3, #0]
 8001204:	3304      	adds	r3, #4
 8001206:	8019      	strh	r1, [r3, #0]
			  HAL_UART_Transmit_IT(&huart6, sendt, sizeof(sendt));
 8001208:	463b      	mov	r3, r7
 800120a:	2206      	movs	r2, #6
 800120c:	4619      	mov	r1, r3
 800120e:	480a      	ldr	r0, [pc, #40]	; (8001238 <main+0x300>)
 8001210:	f003 fc9b 	bl	8004b4a <HAL_UART_Transmit_IT>
			  HAL_Delay(100);
 8001214:	2064      	movs	r0, #100	; 0x64
 8001216:	f000 fe83 	bl	8001f20 <HAL_Delay>
			  count=0;
 800121a:	2300      	movs	r3, #0
 800121c:	63fb      	str	r3, [r7, #60]	; 0x3c
		  }
		  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5)

		  HAL_Delay(500);
 800121e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001222:	f000 fe7d 	bl	8001f20 <HAL_Delay>
	  if(check==1){
 8001226:	e6b9      	b.n	8000f9c <main+0x64>
 8001228:	b020c49c 	.word	0xb020c49c
 800122c:	3fa16872 	.word	0x3fa16872
 8001230:	200000d4 	.word	0x200000d4
 8001234:	2000030c 	.word	0x2000030c
 8001238:	200001ec 	.word	0x200001ec
 800123c:	2000011c 	.word	0x2000011c
 8001240:	08006450 	.word	0x08006450
 8001244:	08006460 	.word	0x08006460
 8001248:	91a2b3c5 	.word	0x91a2b3c5
 800124c:	20000304 	.word	0x20000304
 8001250:	2000008c 	.word	0x2000008c
 8001254:	20000300 	.word	0x20000300
 8001258:	08006448 	.word	0x08006448
 800125c:	200001a8 	.word	0x200001a8
 8001260:	40020800 	.word	0x40020800
 8001264:	200002f0 	.word	0x200002f0
 8001268:	200002f4 	.word	0x200002f4
 800126c:	200002f8 	.word	0x200002f8
 8001270:	200002fc 	.word	0x200002fc
 8001274:	08006474 	.word	0x08006474

08001278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b094      	sub	sp, #80	; 0x50
 800127c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127e:	f107 0320 	add.w	r3, r7, #32
 8001282:	2230      	movs	r2, #48	; 0x30
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f004 fc5c 	bl	8005b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	4b27      	ldr	r3, [pc, #156]	; (8001340 <SystemClock_Config+0xc8>)
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	4a26      	ldr	r2, [pc, #152]	; (8001340 <SystemClock_Config+0xc8>)
 80012a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012aa:	6413      	str	r3, [r2, #64]	; 0x40
 80012ac:	4b24      	ldr	r3, [pc, #144]	; (8001340 <SystemClock_Config+0xc8>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b8:	2300      	movs	r3, #0
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	4b21      	ldr	r3, [pc, #132]	; (8001344 <SystemClock_Config+0xcc>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a20      	ldr	r2, [pc, #128]	; (8001344 <SystemClock_Config+0xcc>)
 80012c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <SystemClock_Config+0xcc>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d4:	2302      	movs	r3, #2
 80012d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d8:	2301      	movs	r3, #1
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012dc:	2310      	movs	r3, #16
 80012de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e0:	2302      	movs	r3, #2
 80012e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012e4:	2300      	movs	r3, #0
 80012e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012e8:	2308      	movs	r3, #8
 80012ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80012ec:	2348      	movs	r3, #72	; 0x48
 80012ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f0:	2302      	movs	r3, #2
 80012f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012f4:	2304      	movs	r3, #4
 80012f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f8:	f107 0320 	add.w	r3, r7, #32
 80012fc:	4618      	mov	r0, r3
 80012fe:	f002 f835 	bl	800336c <HAL_RCC_OscConfig>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001308:	f000 fa9c 	bl	8001844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130c:	230f      	movs	r3, #15
 800130e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001310:	2302      	movs	r3, #2
 8001312:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	2102      	movs	r1, #2
 8001328:	4618      	mov	r0, r3
 800132a:	f002 fa97 	bl	800385c <HAL_RCC_ClockConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001334:	f000 fa86 	bl	8001844 <Error_Handler>
  }
}
 8001338:	bf00      	nop
 800133a:	3750      	adds	r7, #80	; 0x50
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40023800 	.word	0x40023800
 8001344:	40007000 	.word	0x40007000

08001348 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800134e:	463b      	mov	r3, r7
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800135a:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <MX_ADC1_Init+0x98>)
 800135c:	4a21      	ldr	r2, [pc, #132]	; (80013e4 <MX_ADC1_Init+0x9c>)
 800135e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001360:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <MX_ADC1_Init+0x98>)
 8001362:	2200      	movs	r2, #0
 8001364:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001366:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <MX_ADC1_Init+0x98>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <MX_ADC1_Init+0x98>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001372:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <MX_ADC1_Init+0x98>)
 8001374:	2200      	movs	r2, #0
 8001376:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001378:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <MX_ADC1_Init+0x98>)
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <MX_ADC1_Init+0x98>)
 8001382:	2200      	movs	r2, #0
 8001384:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <MX_ADC1_Init+0x98>)
 8001388:	4a17      	ldr	r2, [pc, #92]	; (80013e8 <MX_ADC1_Init+0xa0>)
 800138a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <MX_ADC1_Init+0x98>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <MX_ADC1_Init+0x98>)
 8001394:	2201      	movs	r2, #1
 8001396:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_ADC1_Init+0x98>)
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <MX_ADC1_Init+0x98>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013a6:	480e      	ldr	r0, [pc, #56]	; (80013e0 <MX_ADC1_Init+0x98>)
 80013a8:	f000 fdde 	bl	8001f68 <HAL_ADC_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80013b2:	f000 fa47 	bl	8001844 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013ba:	2301      	movs	r3, #1
 80013bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c2:	463b      	mov	r3, r7
 80013c4:	4619      	mov	r1, r3
 80013c6:	4806      	ldr	r0, [pc, #24]	; (80013e0 <MX_ADC1_Init+0x98>)
 80013c8:	f000 ff5e 	bl	8002288 <HAL_ADC_ConfigChannel>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80013d2:	f000 fa37 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000008c 	.word	0x2000008c
 80013e4:	40012000 	.word	0x40012000
 80013e8:	0f000001 	.word	0x0f000001

080013ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001400:	463b      	mov	r3, r7
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001408:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <MX_TIM1_Init+0x98>)
 800140a:	4a1f      	ldr	r2, [pc, #124]	; (8001488 <MX_TIM1_Init+0x9c>)
 800140c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800140e:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <MX_TIM1_Init+0x98>)
 8001410:	2247      	movs	r2, #71	; 0x47
 8001412:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001414:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <MX_TIM1_Init+0x98>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <MX_TIM1_Init+0x98>)
 800141c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001420:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001422:	4b18      	ldr	r3, [pc, #96]	; (8001484 <MX_TIM1_Init+0x98>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001428:	4b16      	ldr	r3, [pc, #88]	; (8001484 <MX_TIM1_Init+0x98>)
 800142a:	2200      	movs	r2, #0
 800142c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <MX_TIM1_Init+0x98>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001434:	4813      	ldr	r0, [pc, #76]	; (8001484 <MX_TIM1_Init+0x98>)
 8001436:	f002 fc31 	bl	8003c9c <HAL_TIM_Base_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001440:	f000 fa00 	bl	8001844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001448:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800144a:	f107 0308 	add.w	r3, r7, #8
 800144e:	4619      	mov	r1, r3
 8001450:	480c      	ldr	r0, [pc, #48]	; (8001484 <MX_TIM1_Init+0x98>)
 8001452:	f002 fe99 	bl	8004188 <HAL_TIM_ConfigClockSource>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800145c:	f000 f9f2 	bl	8001844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001460:	2300      	movs	r3, #0
 8001462:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001464:	2300      	movs	r3, #0
 8001466:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001468:	463b      	mov	r3, r7
 800146a:	4619      	mov	r1, r3
 800146c:	4805      	ldr	r0, [pc, #20]	; (8001484 <MX_TIM1_Init+0x98>)
 800146e:	f003 fa1f 	bl	80048b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001478:	f000 f9e4 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200000d4 	.word	0x200000d4
 8001488:	40010000 	.word	0x40010000

0800148c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08e      	sub	sp, #56	; 0x38
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001492:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a0:	f107 0320 	add.w	r3, r7, #32
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
 80014b8:	615a      	str	r2, [r3, #20]
 80014ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014bc:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <MX_TIM2_Init+0xe8>)
 80014be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80014c4:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <MX_TIM2_Init+0xe8>)
 80014c6:	2247      	movs	r2, #71	; 0x47
 80014c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ca:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <MX_TIM2_Init+0xe8>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 80014d0:	4b28      	ldr	r3, [pc, #160]	; (8001574 <MX_TIM2_Init+0xe8>)
 80014d2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80014d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d8:	4b26      	ldr	r3, [pc, #152]	; (8001574 <MX_TIM2_Init+0xe8>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014de:	4b25      	ldr	r3, [pc, #148]	; (8001574 <MX_TIM2_Init+0xe8>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014e4:	4823      	ldr	r0, [pc, #140]	; (8001574 <MX_TIM2_Init+0xe8>)
 80014e6:	f002 fbd9 	bl	8003c9c <HAL_TIM_Base_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80014f0:	f000 f9a8 	bl	8001844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014fe:	4619      	mov	r1, r3
 8001500:	481c      	ldr	r0, [pc, #112]	; (8001574 <MX_TIM2_Init+0xe8>)
 8001502:	f002 fe41 	bl	8004188 <HAL_TIM_ConfigClockSource>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800150c:	f000 f99a 	bl	8001844 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001510:	4818      	ldr	r0, [pc, #96]	; (8001574 <MX_TIM2_Init+0xe8>)
 8001512:	f002 fc6d 	bl	8003df0 <HAL_TIM_PWM_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800151c:	f000 f992 	bl	8001844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001520:	2300      	movs	r3, #0
 8001522:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001528:	f107 0320 	add.w	r3, r7, #32
 800152c:	4619      	mov	r1, r3
 800152e:	4811      	ldr	r0, [pc, #68]	; (8001574 <MX_TIM2_Init+0xe8>)
 8001530:	f003 f9be 	bl	80048b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800153a:	f000 f983 	bl	8001844 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800153e:	2360      	movs	r3, #96	; 0x60
 8001540:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2200      	movs	r2, #0
 8001552:	4619      	mov	r1, r3
 8001554:	4807      	ldr	r0, [pc, #28]	; (8001574 <MX_TIM2_Init+0xe8>)
 8001556:	f002 fd55 	bl	8004004 <HAL_TIM_PWM_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001560:	f000 f970 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001564:	4803      	ldr	r0, [pc, #12]	; (8001574 <MX_TIM2_Init+0xe8>)
 8001566:	f000 fa15 	bl	8001994 <HAL_TIM_MspPostInit>

}
 800156a:	bf00      	nop
 800156c:	3738      	adds	r7, #56	; 0x38
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	2000011c 	.word	0x2000011c

08001578 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <MX_USART1_UART_Init+0x4c>)
 800157e:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <MX_USART1_UART_Init+0x50>)
 8001580:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <MX_USART1_UART_Init+0x4c>)
 8001584:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001588:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <MX_USART1_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <MX_USART1_UART_Init+0x4c>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <MX_USART1_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <MX_USART1_UART_Init+0x4c>)
 800159e:	220c      	movs	r2, #12
 80015a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <MX_USART1_UART_Init+0x4c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <MX_USART1_UART_Init+0x4c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015ae:	4805      	ldr	r0, [pc, #20]	; (80015c4 <MX_USART1_UART_Init+0x4c>)
 80015b0:	f003 f9ec 	bl	800498c <HAL_UART_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015ba:	f000 f943 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000164 	.word	0x20000164
 80015c8:	40011000 	.word	0x40011000

080015cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <MX_USART2_UART_Init+0x4c>)
 80015d2:	4a12      	ldr	r2, [pc, #72]	; (800161c <MX_USART2_UART_Init+0x50>)
 80015d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <MX_USART2_UART_Init+0x4c>)
 80015d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <MX_USART2_UART_Init+0x4c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <MX_USART2_UART_Init+0x4c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <MX_USART2_UART_Init+0x4c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <MX_USART2_UART_Init+0x4c>)
 80015f2:	220c      	movs	r2, #12
 80015f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <MX_USART2_UART_Init+0x4c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <MX_USART2_UART_Init+0x4c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_USART2_UART_Init+0x4c>)
 8001604:	f003 f9c2 	bl	800498c <HAL_UART_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800160e:	f000 f919 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200001a8 	.word	0x200001a8
 800161c:	40004400 	.word	0x40004400

08001620 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <MX_USART6_UART_Init+0x4c>)
 8001626:	4a12      	ldr	r2, [pc, #72]	; (8001670 <MX_USART6_UART_Init+0x50>)
 8001628:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <MX_USART6_UART_Init+0x4c>)
 800162c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001630:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <MX_USART6_UART_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <MX_USART6_UART_Init+0x4c>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <MX_USART6_UART_Init+0x4c>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <MX_USART6_UART_Init+0x4c>)
 8001646:	220c      	movs	r2, #12
 8001648:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <MX_USART6_UART_Init+0x4c>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <MX_USART6_UART_Init+0x4c>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001656:	4805      	ldr	r0, [pc, #20]	; (800166c <MX_USART6_UART_Init+0x4c>)
 8001658:	f003 f998 	bl	800498c <HAL_UART_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001662:	f000 f8ef 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200001ec 	.word	0x200001ec
 8001670:	40011400 	.word	0x40011400

08001674 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <MX_DMA_Init+0x4c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a0f      	ldr	r2, [pc, #60]	; (80016c0 <MX_DMA_Init+0x4c>)
 8001684:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <MX_DMA_Init+0x4c>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2100      	movs	r1, #0
 800169a:	203a      	movs	r0, #58	; 0x3a
 800169c:	f001 f8fd 	bl	800289a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80016a0:	203a      	movs	r0, #58	; 0x3a
 80016a2:	f001 f916 	bl	80028d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	2046      	movs	r0, #70	; 0x46
 80016ac:	f001 f8f5 	bl	800289a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80016b0:	2046      	movs	r0, #70	; 0x46
 80016b2:	f001 f90e 	bl	80028d2 <HAL_NVIC_EnableIRQ>

}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800

080016c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	; 0x28
 80016c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	4b55      	ldr	r3, [pc, #340]	; (8001834 <MX_GPIO_Init+0x170>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a54      	ldr	r2, [pc, #336]	; (8001834 <MX_GPIO_Init+0x170>)
 80016e4:	f043 0304 	orr.w	r3, r3, #4
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b52      	ldr	r3, [pc, #328]	; (8001834 <MX_GPIO_Init+0x170>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b4e      	ldr	r3, [pc, #312]	; (8001834 <MX_GPIO_Init+0x170>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a4d      	ldr	r2, [pc, #308]	; (8001834 <MX_GPIO_Init+0x170>)
 8001700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b4b      	ldr	r3, [pc, #300]	; (8001834 <MX_GPIO_Init+0x170>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	4b47      	ldr	r3, [pc, #284]	; (8001834 <MX_GPIO_Init+0x170>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a46      	ldr	r2, [pc, #280]	; (8001834 <MX_GPIO_Init+0x170>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b44      	ldr	r3, [pc, #272]	; (8001834 <MX_GPIO_Init+0x170>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	4b40      	ldr	r3, [pc, #256]	; (8001834 <MX_GPIO_Init+0x170>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a3f      	ldr	r2, [pc, #252]	; (8001834 <MX_GPIO_Init+0x170>)
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b3d      	ldr	r3, [pc, #244]	; (8001834 <MX_GPIO_Init+0x170>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800174a:	2200      	movs	r2, #0
 800174c:	2110      	movs	r1, #16
 800174e:	483a      	ldr	r0, [pc, #232]	; (8001838 <MX_GPIO_Init+0x174>)
 8001750:	f001 fdf2 	bl	8003338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_12, GPIO_PIN_RESET);
 8001754:	2200      	movs	r2, #0
 8001756:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 800175a:	4838      	ldr	r0, [pc, #224]	; (800183c <MX_GPIO_Init+0x178>)
 800175c:	f001 fdec 	bl	8003338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001760:	2200      	movs	r2, #0
 8001762:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001766:	4836      	ldr	r0, [pc, #216]	; (8001840 <MX_GPIO_Init+0x17c>)
 8001768:	f001 fde6 	bl	8003338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800176c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001772:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4619      	mov	r1, r3
 8001782:	482e      	ldr	r0, [pc, #184]	; (800183c <MX_GPIO_Init+0x178>)
 8001784:	f001 fc3c 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001788:	2310      	movs	r3, #16
 800178a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178c:	2301      	movs	r3, #1
 800178e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	4826      	ldr	r0, [pc, #152]	; (8001838 <MX_GPIO_Init+0x174>)
 80017a0:	f001 fc2e 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017a4:	2340      	movs	r3, #64	; 0x40
 80017a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	4619      	mov	r1, r3
 80017b6:	4820      	ldr	r0, [pc, #128]	; (8001838 <MX_GPIO_Init+0x174>)
 80017b8:	f001 fc22 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 80017bc:	f44f 6388 	mov.w	r3, #1088	; 0x440
 80017c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	4619      	mov	r1, r3
 80017d0:	481a      	ldr	r0, [pc, #104]	; (800183c <MX_GPIO_Init+0x178>)
 80017d2:	f001 fc15 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80017d6:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80017da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017dc:	2301      	movs	r3, #1
 80017de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2300      	movs	r3, #0
 80017e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	4813      	ldr	r0, [pc, #76]	; (800183c <MX_GPIO_Init+0x178>)
 80017f0:	f001 fc06 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fa:	2301      	movs	r3, #1
 80017fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	4619      	mov	r1, r3
 800180c:	480c      	ldr	r0, [pc, #48]	; (8001840 <MX_GPIO_Init+0x17c>)
 800180e:	f001 fbf7 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001818:	2300      	movs	r3, #0
 800181a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4619      	mov	r1, r3
 8001826:	4806      	ldr	r0, [pc, #24]	; (8001840 <MX_GPIO_Init+0x17c>)
 8001828:	f001 fbea 	bl	8003000 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800182c:	bf00      	nop
 800182e:	3728      	adds	r7, #40	; 0x28
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40023800 	.word	0x40023800
 8001838:	40020000 	.word	0x40020000
 800183c:	40020800 	.word	0x40020800
 8001840:	40020400 	.word	0x40020400

08001844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001848:	b672      	cpsid	i
}
 800184a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800184c:	e7fe      	b.n	800184c <Error_Handler+0x8>
	...

08001850 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <HAL_MspInit+0x4c>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	4a0f      	ldr	r2, [pc, #60]	; (800189c <HAL_MspInit+0x4c>)
 8001860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001864:	6453      	str	r3, [r2, #68]	; 0x44
 8001866:	4b0d      	ldr	r3, [pc, #52]	; (800189c <HAL_MspInit+0x4c>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	603b      	str	r3, [r7, #0]
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_MspInit+0x4c>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	4a08      	ldr	r2, [pc, #32]	; (800189c <HAL_MspInit+0x4c>)
 800187c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001880:	6413      	str	r3, [r2, #64]	; 0x40
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_MspInit+0x4c>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800188e:	2005      	movs	r0, #5
 8001890:	f000 fff8 	bl	8002884 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40023800 	.word	0x40023800

080018a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a17      	ldr	r2, [pc, #92]	; (800191c <HAL_ADC_MspInit+0x7c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d127      	bne.n	8001912 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	4b16      	ldr	r3, [pc, #88]	; (8001920 <HAL_ADC_MspInit+0x80>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	4a15      	ldr	r2, [pc, #84]	; (8001920 <HAL_ADC_MspInit+0x80>)
 80018cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d0:	6453      	str	r3, [r2, #68]	; 0x44
 80018d2:	4b13      	ldr	r3, [pc, #76]	; (8001920 <HAL_ADC_MspInit+0x80>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <HAL_ADC_MspInit+0x80>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a0e      	ldr	r2, [pc, #56]	; (8001920 <HAL_ADC_MspInit+0x80>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <HAL_ADC_MspInit+0x80>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018fa:	2301      	movs	r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018fe:	2303      	movs	r3, #3
 8001900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	4805      	ldr	r0, [pc, #20]	; (8001924 <HAL_ADC_MspInit+0x84>)
 800190e:	f001 fb77 	bl	8003000 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001912:	bf00      	nop
 8001914:	3728      	adds	r7, #40	; 0x28
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40012000 	.word	0x40012000
 8001920:	40023800 	.word	0x40023800
 8001924:	40020000 	.word	0x40020000

08001928 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a15      	ldr	r2, [pc, #84]	; (800198c <HAL_TIM_Base_MspInit+0x64>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d10e      	bne.n	8001958 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4b14      	ldr	r3, [pc, #80]	; (8001990 <HAL_TIM_Base_MspInit+0x68>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	4a13      	ldr	r2, [pc, #76]	; (8001990 <HAL_TIM_Base_MspInit+0x68>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6453      	str	r3, [r2, #68]	; 0x44
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <HAL_TIM_Base_MspInit+0x68>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001956:	e012      	b.n	800197e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001960:	d10d      	bne.n	800197e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <HAL_TIM_Base_MspInit+0x68>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	4a09      	ldr	r2, [pc, #36]	; (8001990 <HAL_TIM_Base_MspInit+0x68>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6413      	str	r3, [r2, #64]	; 0x40
 8001972:	4b07      	ldr	r3, [pc, #28]	; (8001990 <HAL_TIM_Base_MspInit+0x68>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	68bb      	ldr	r3, [r7, #8]
}
 800197e:	bf00      	nop
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40010000 	.word	0x40010000
 8001990:	40023800 	.word	0x40023800

08001994 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019b4:	d11d      	bne.n	80019f2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <HAL_TIM_MspPostInit+0x68>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a0f      	ldr	r2, [pc, #60]	; (80019fc <HAL_TIM_MspPostInit+0x68>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <HAL_TIM_MspPostInit+0x68>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019d2:	2320      	movs	r3, #32
 80019d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d6:	2302      	movs	r3, #2
 80019d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019e2:	2301      	movs	r3, #1
 80019e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e6:	f107 030c 	add.w	r3, r7, #12
 80019ea:	4619      	mov	r1, r3
 80019ec:	4804      	ldr	r0, [pc, #16]	; (8001a00 <HAL_TIM_MspPostInit+0x6c>)
 80019ee:	f001 fb07 	bl	8003000 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80019f2:	bf00      	nop
 80019f4:	3720      	adds	r7, #32
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020000 	.word	0x40020000

08001a04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08e      	sub	sp, #56	; 0x38
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a95      	ldr	r2, [pc, #596]	; (8001c78 <HAL_UART_MspInit+0x274>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	f040 8092 	bne.w	8001b4c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a28:	2300      	movs	r3, #0
 8001a2a:	623b      	str	r3, [r7, #32]
 8001a2c:	4b93      	ldr	r3, [pc, #588]	; (8001c7c <HAL_UART_MspInit+0x278>)
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a30:	4a92      	ldr	r2, [pc, #584]	; (8001c7c <HAL_UART_MspInit+0x278>)
 8001a32:	f043 0310 	orr.w	r3, r3, #16
 8001a36:	6453      	str	r3, [r2, #68]	; 0x44
 8001a38:	4b90      	ldr	r3, [pc, #576]	; (8001c7c <HAL_UART_MspInit+0x278>)
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3c:	f003 0310 	and.w	r3, r3, #16
 8001a40:	623b      	str	r3, [r7, #32]
 8001a42:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a44:	2300      	movs	r3, #0
 8001a46:	61fb      	str	r3, [r7, #28]
 8001a48:	4b8c      	ldr	r3, [pc, #560]	; (8001c7c <HAL_UART_MspInit+0x278>)
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	4a8b      	ldr	r2, [pc, #556]	; (8001c7c <HAL_UART_MspInit+0x278>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6313      	str	r3, [r2, #48]	; 0x30
 8001a54:	4b89      	ldr	r3, [pc, #548]	; (8001c7c <HAL_UART_MspInit+0x278>)
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	61fb      	str	r3, [r7, #28]
 8001a5e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a60:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a66:	2302      	movs	r3, #2
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a72:	2307      	movs	r3, #7
 8001a74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4880      	ldr	r0, [pc, #512]	; (8001c80 <HAL_UART_MspInit+0x27c>)
 8001a7e:	f001 fabf 	bl	8003000 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001a82:	4b80      	ldr	r3, [pc, #512]	; (8001c84 <HAL_UART_MspInit+0x280>)
 8001a84:	4a80      	ldr	r2, [pc, #512]	; (8001c88 <HAL_UART_MspInit+0x284>)
 8001a86:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001a88:	4b7e      	ldr	r3, [pc, #504]	; (8001c84 <HAL_UART_MspInit+0x280>)
 8001a8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a8e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a90:	4b7c      	ldr	r3, [pc, #496]	; (8001c84 <HAL_UART_MspInit+0x280>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a96:	4b7b      	ldr	r3, [pc, #492]	; (8001c84 <HAL_UART_MspInit+0x280>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a9c:	4b79      	ldr	r3, [pc, #484]	; (8001c84 <HAL_UART_MspInit+0x280>)
 8001a9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aa2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aa4:	4b77      	ldr	r3, [pc, #476]	; (8001c84 <HAL_UART_MspInit+0x280>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aaa:	4b76      	ldr	r3, [pc, #472]	; (8001c84 <HAL_UART_MspInit+0x280>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001ab0:	4b74      	ldr	r3, [pc, #464]	; (8001c84 <HAL_UART_MspInit+0x280>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ab6:	4b73      	ldr	r3, [pc, #460]	; (8001c84 <HAL_UART_MspInit+0x280>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001abc:	4b71      	ldr	r3, [pc, #452]	; (8001c84 <HAL_UART_MspInit+0x280>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001ac2:	4870      	ldr	r0, [pc, #448]	; (8001c84 <HAL_UART_MspInit+0x280>)
 8001ac4:	f000 ff20 	bl	8002908 <HAL_DMA_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001ace:	f7ff feb9 	bl	8001844 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a6b      	ldr	r2, [pc, #428]	; (8001c84 <HAL_UART_MspInit+0x280>)
 8001ad6:	639a      	str	r2, [r3, #56]	; 0x38
 8001ad8:	4a6a      	ldr	r2, [pc, #424]	; (8001c84 <HAL_UART_MspInit+0x280>)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001ade:	4b6b      	ldr	r3, [pc, #428]	; (8001c8c <HAL_UART_MspInit+0x288>)
 8001ae0:	4a6b      	ldr	r2, [pc, #428]	; (8001c90 <HAL_UART_MspInit+0x28c>)
 8001ae2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001ae4:	4b69      	ldr	r3, [pc, #420]	; (8001c8c <HAL_UART_MspInit+0x288>)
 8001ae6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aea:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001aec:	4b67      	ldr	r3, [pc, #412]	; (8001c8c <HAL_UART_MspInit+0x288>)
 8001aee:	2240      	movs	r2, #64	; 0x40
 8001af0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af2:	4b66      	ldr	r3, [pc, #408]	; (8001c8c <HAL_UART_MspInit+0x288>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001af8:	4b64      	ldr	r3, [pc, #400]	; (8001c8c <HAL_UART_MspInit+0x288>)
 8001afa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001afe:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b00:	4b62      	ldr	r3, [pc, #392]	; (8001c8c <HAL_UART_MspInit+0x288>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b06:	4b61      	ldr	r3, [pc, #388]	; (8001c8c <HAL_UART_MspInit+0x288>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001b0c:	4b5f      	ldr	r3, [pc, #380]	; (8001c8c <HAL_UART_MspInit+0x288>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b12:	4b5e      	ldr	r3, [pc, #376]	; (8001c8c <HAL_UART_MspInit+0x288>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b18:	4b5c      	ldr	r3, [pc, #368]	; (8001c8c <HAL_UART_MspInit+0x288>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001b1e:	485b      	ldr	r0, [pc, #364]	; (8001c8c <HAL_UART_MspInit+0x288>)
 8001b20:	f000 fef2 	bl	8002908 <HAL_DMA_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001b2a:	f7ff fe8b 	bl	8001844 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a56      	ldr	r2, [pc, #344]	; (8001c8c <HAL_UART_MspInit+0x288>)
 8001b32:	635a      	str	r2, [r3, #52]	; 0x34
 8001b34:	4a55      	ldr	r2, [pc, #340]	; (8001c8c <HAL_UART_MspInit+0x288>)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2102      	movs	r1, #2
 8001b3e:	2025      	movs	r0, #37	; 0x25
 8001b40:	f000 feab 	bl	800289a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b44:	2025      	movs	r0, #37	; 0x25
 8001b46:	f000 fec4 	bl	80028d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001b4a:	e091      	b.n	8001c70 <HAL_UART_MspInit+0x26c>
  else if(huart->Instance==USART2)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a50      	ldr	r2, [pc, #320]	; (8001c94 <HAL_UART_MspInit+0x290>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d134      	bne.n	8001bc0 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	61bb      	str	r3, [r7, #24]
 8001b5a:	4b48      	ldr	r3, [pc, #288]	; (8001c7c <HAL_UART_MspInit+0x278>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	4a47      	ldr	r2, [pc, #284]	; (8001c7c <HAL_UART_MspInit+0x278>)
 8001b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b64:	6413      	str	r3, [r2, #64]	; 0x40
 8001b66:	4b45      	ldr	r3, [pc, #276]	; (8001c7c <HAL_UART_MspInit+0x278>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	61bb      	str	r3, [r7, #24]
 8001b70:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	4b41      	ldr	r3, [pc, #260]	; (8001c7c <HAL_UART_MspInit+0x278>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a40      	ldr	r2, [pc, #256]	; (8001c7c <HAL_UART_MspInit+0x278>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b3e      	ldr	r3, [pc, #248]	; (8001c7c <HAL_UART_MspInit+0x278>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b8e:	230c      	movs	r3, #12
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	2302      	movs	r3, #2
 8001b94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b9e:	2307      	movs	r3, #7
 8001ba0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4835      	ldr	r0, [pc, #212]	; (8001c80 <HAL_UART_MspInit+0x27c>)
 8001baa:	f001 fa29 	bl	8003000 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	2026      	movs	r0, #38	; 0x26
 8001bb4:	f000 fe71 	bl	800289a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bb8:	2026      	movs	r0, #38	; 0x26
 8001bba:	f000 fe8a 	bl	80028d2 <HAL_NVIC_EnableIRQ>
}
 8001bbe:	e057      	b.n	8001c70 <HAL_UART_MspInit+0x26c>
  else if(huart->Instance==USART6)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a34      	ldr	r2, [pc, #208]	; (8001c98 <HAL_UART_MspInit+0x294>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d152      	bne.n	8001c70 <HAL_UART_MspInit+0x26c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	4b2b      	ldr	r3, [pc, #172]	; (8001c7c <HAL_UART_MspInit+0x278>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	4a2a      	ldr	r2, [pc, #168]	; (8001c7c <HAL_UART_MspInit+0x278>)
 8001bd4:	f043 0320 	orr.w	r3, r3, #32
 8001bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bda:	4b28      	ldr	r3, [pc, #160]	; (8001c7c <HAL_UART_MspInit+0x278>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	f003 0320 	and.w	r3, r3, #32
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <HAL_UART_MspInit+0x278>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4a23      	ldr	r2, [pc, #140]	; (8001c7c <HAL_UART_MspInit+0x278>)
 8001bf0:	f043 0304 	orr.w	r3, r3, #4
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4b21      	ldr	r3, [pc, #132]	; (8001c7c <HAL_UART_MspInit+0x278>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <HAL_UART_MspInit+0x278>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4a1c      	ldr	r2, [pc, #112]	; (8001c7c <HAL_UART_MspInit+0x278>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <HAL_UART_MspInit+0x278>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001c2e:	2308      	movs	r3, #8
 8001c30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c36:	4619      	mov	r1, r3
 8001c38:	4818      	ldr	r0, [pc, #96]	; (8001c9c <HAL_UART_MspInit+0x298>)
 8001c3a:	f001 f9e1 	bl	8003000 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001c50:	2308      	movs	r3, #8
 8001c52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4809      	ldr	r0, [pc, #36]	; (8001c80 <HAL_UART_MspInit+0x27c>)
 8001c5c:	f001 f9d0 	bl	8003000 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 2, 0);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2102      	movs	r1, #2
 8001c64:	2047      	movs	r0, #71	; 0x47
 8001c66:	f000 fe18 	bl	800289a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001c6a:	2047      	movs	r0, #71	; 0x47
 8001c6c:	f000 fe31 	bl	80028d2 <HAL_NVIC_EnableIRQ>
}
 8001c70:	bf00      	nop
 8001c72:	3738      	adds	r7, #56	; 0x38
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40011000 	.word	0x40011000
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40020000 	.word	0x40020000
 8001c84:	20000230 	.word	0x20000230
 8001c88:	40026440 	.word	0x40026440
 8001c8c:	20000290 	.word	0x20000290
 8001c90:	400264b8 	.word	0x400264b8
 8001c94:	40004400 	.word	0x40004400
 8001c98:	40011400 	.word	0x40011400
 8001c9c:	40020800 	.word	0x40020800

08001ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <NMI_Handler+0x4>

08001ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001caa:	e7fe      	b.n	8001caa <HardFault_Handler+0x4>

08001cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <MemManage_Handler+0x4>

08001cb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb6:	e7fe      	b.n	8001cb6 <BusFault_Handler+0x4>

08001cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <UsageFault_Handler+0x4>

08001cbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cec:	f000 f8f8 	bl	8001ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cf8:	4802      	ldr	r0, [pc, #8]	; (8001d04 <USART1_IRQHandler+0x10>)
 8001cfa:	f002 ff9b 	bl	8004c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000164 	.word	0x20000164

08001d08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d0c:	4802      	ldr	r0, [pc, #8]	; (8001d18 <USART2_IRQHandler+0x10>)
 8001d0e:	f002 ff91 	bl	8004c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200001a8 	.word	0x200001a8

08001d1c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001d20:	4802      	ldr	r0, [pc, #8]	; (8001d2c <DMA2_Stream2_IRQHandler+0x10>)
 8001d22:	f000 ff31 	bl	8002b88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000230 	.word	0x20000230

08001d30 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <DMA2_Stream7_IRQHandler+0x10>)
 8001d36:	f000 ff27 	bl	8002b88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000290 	.word	0x20000290

08001d44 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001d48:	4802      	ldr	r0, [pc, #8]	; (8001d54 <USART6_IRQHandler+0x10>)
 8001d4a:	f002 ff73 	bl	8004c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200001ec 	.word	0x200001ec

08001d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d60:	4a14      	ldr	r2, [pc, #80]	; (8001db4 <_sbrk+0x5c>)
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <_sbrk+0x60>)
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d6c:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <_sbrk+0x64>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d102      	bne.n	8001d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <_sbrk+0x64>)
 8001d76:	4a12      	ldr	r2, [pc, #72]	; (8001dc0 <_sbrk+0x68>)
 8001d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <_sbrk+0x64>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d207      	bcs.n	8001d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d88:	f003 feb2 	bl	8005af0 <__errno>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	220c      	movs	r2, #12
 8001d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d92:	f04f 33ff 	mov.w	r3, #4294967295
 8001d96:	e009      	b.n	8001dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d9e:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <_sbrk+0x64>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	4a05      	ldr	r2, [pc, #20]	; (8001dbc <_sbrk+0x64>)
 8001da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001daa:	68fb      	ldr	r3, [r7, #12]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20020000 	.word	0x20020000
 8001db8:	00000400 	.word	0x00000400
 8001dbc:	20000310 	.word	0x20000310
 8001dc0:	20000328 	.word	0x20000328

08001dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <SystemInit+0x20>)
 8001dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dce:	4a05      	ldr	r2, [pc, #20]	; (8001de4 <SystemInit+0x20>)
 8001dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dec:	480d      	ldr	r0, [pc, #52]	; (8001e24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dee:	490e      	ldr	r1, [pc, #56]	; (8001e28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001df0:	4a0e      	ldr	r2, [pc, #56]	; (8001e2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df4:	e002      	b.n	8001dfc <LoopCopyDataInit>

08001df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dfa:	3304      	adds	r3, #4

08001dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e00:	d3f9      	bcc.n	8001df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e02:	4a0b      	ldr	r2, [pc, #44]	; (8001e30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e04:	4c0b      	ldr	r4, [pc, #44]	; (8001e34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e08:	e001      	b.n	8001e0e <LoopFillZerobss>

08001e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e0c:	3204      	adds	r2, #4

08001e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e10:	d3fb      	bcc.n	8001e0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e12:	f7ff ffd7 	bl	8001dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e16:	f003 fe71 	bl	8005afc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e1a:	f7ff f88d 	bl	8000f38 <main>
  bx  lr    
 8001e1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e28:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001e2c:	080064e0 	.word	0x080064e0
  ldr r2, =_sbss
 8001e30:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001e34:	20000328 	.word	0x20000328

08001e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e38:	e7fe      	b.n	8001e38 <ADC_IRQHandler>
	...

08001e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e40:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <HAL_Init+0x40>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a0d      	ldr	r2, [pc, #52]	; (8001e7c <HAL_Init+0x40>)
 8001e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_Init+0x40>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <HAL_Init+0x40>)
 8001e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <HAL_Init+0x40>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a07      	ldr	r2, [pc, #28]	; (8001e7c <HAL_Init+0x40>)
 8001e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e64:	2003      	movs	r0, #3
 8001e66:	f000 fd0d 	bl	8002884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f000 f808 	bl	8001e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e70:	f7ff fcee 	bl	8001850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40023c00 	.word	0x40023c00

08001e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e88:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_InitTick+0x54>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_InitTick+0x58>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	4619      	mov	r1, r3
 8001e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 fd25 	bl	80028ee <HAL_SYSTICK_Config>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e00e      	b.n	8001ecc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b0f      	cmp	r3, #15
 8001eb2:	d80a      	bhi.n	8001eca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ebc:	f000 fced 	bl	800289a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ec0:	4a06      	ldr	r2, [pc, #24]	; (8001edc <HAL_InitTick+0x5c>)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e000      	b.n	8001ecc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000000 	.word	0x20000000
 8001ed8:	20000008 	.word	0x20000008
 8001edc:	20000004 	.word	0x20000004

08001ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_IncTick+0x20>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_IncTick+0x24>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <HAL_IncTick+0x24>)
 8001ef2:	6013      	str	r3, [r2, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	20000008 	.word	0x20000008
 8001f04:	20000314 	.word	0x20000314

08001f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f0c:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <HAL_GetTick+0x14>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000314 	.word	0x20000314

08001f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f28:	f7ff ffee 	bl	8001f08 <HAL_GetTick>
 8001f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f38:	d005      	beq.n	8001f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <HAL_Delay+0x44>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4413      	add	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f46:	bf00      	nop
 8001f48:	f7ff ffde 	bl	8001f08 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d8f7      	bhi.n	8001f48 <HAL_Delay+0x28>
  {
  }
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000008 	.word	0x20000008

08001f68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e033      	b.n	8001fe6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d109      	bne.n	8001f9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff fc8a 	bl	80018a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d118      	bne.n	8001fd8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fae:	f023 0302 	bic.w	r3, r3, #2
 8001fb2:	f043 0202 	orr.w	r2, r3, #2
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 fa96 	bl	80024ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	f023 0303 	bic.w	r3, r3, #3
 8001fce:	f043 0201 	orr.w	r2, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	641a      	str	r2, [r3, #64]	; 0x40
 8001fd6:	e001      	b.n	8001fdc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002002:	2b01      	cmp	r3, #1
 8002004:	d101      	bne.n	800200a <HAL_ADC_Start+0x1a>
 8002006:	2302      	movs	r3, #2
 8002008:	e097      	b.n	800213a <HAL_ADC_Start+0x14a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b01      	cmp	r3, #1
 800201e:	d018      	beq.n	8002052 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0201 	orr.w	r2, r2, #1
 800202e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002030:	4b45      	ldr	r3, [pc, #276]	; (8002148 <HAL_ADC_Start+0x158>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a45      	ldr	r2, [pc, #276]	; (800214c <HAL_ADC_Start+0x15c>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	0c9a      	lsrs	r2, r3, #18
 800203c:	4613      	mov	r3, r2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4413      	add	r3, r2
 8002042:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002044:	e002      	b.n	800204c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	3b01      	subs	r3, #1
 800204a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f9      	bne.n	8002046 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b01      	cmp	r3, #1
 800205e:	d15f      	bne.n	8002120 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002068:	f023 0301 	bic.w	r3, r3, #1
 800206c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800207e:	2b00      	cmp	r3, #0
 8002080:	d007      	beq.n	8002092 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800208a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800209a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800209e:	d106      	bne.n	80020ae <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a4:	f023 0206 	bic.w	r2, r3, #6
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	645a      	str	r2, [r3, #68]	; 0x44
 80020ac:	e002      	b.n	80020b4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020bc:	4b24      	ldr	r3, [pc, #144]	; (8002150 <HAL_ADC_Start+0x160>)
 80020be:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80020c8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 031f 	and.w	r3, r3, #31
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10f      	bne.n	80020f6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d129      	bne.n	8002138 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	e020      	b.n	8002138 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a16      	ldr	r2, [pc, #88]	; (8002154 <HAL_ADC_Start+0x164>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d11b      	bne.n	8002138 <HAL_ADC_Start+0x148>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d114      	bne.n	8002138 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800211c:	609a      	str	r2, [r3, #8]
 800211e:	e00b      	b.n	8002138 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	f043 0210 	orr.w	r2, r3, #16
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002130:	f043 0201 	orr.w	r2, r3, #1
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	20000000 	.word	0x20000000
 800214c:	431bde83 	.word	0x431bde83
 8002150:	40012300 	.word	0x40012300
 8002154:	40012000 	.word	0x40012000

08002158 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002174:	d113      	bne.n	800219e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002184:	d10b      	bne.n	800219e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f043 0220 	orr.w	r2, r3, #32
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e063      	b.n	8002266 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800219e:	f7ff feb3 	bl	8001f08 <HAL_GetTick>
 80021a2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021a4:	e021      	b.n	80021ea <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ac:	d01d      	beq.n	80021ea <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d007      	beq.n	80021c4 <HAL_ADC_PollForConversion+0x6c>
 80021b4:	f7ff fea8 	bl	8001f08 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d212      	bcs.n	80021ea <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d00b      	beq.n	80021ea <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f043 0204 	orr.w	r2, r3, #4
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e03d      	b.n	8002266 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d1d6      	bne.n	80021a6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f06f 0212 	mvn.w	r2, #18
 8002200:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d123      	bne.n	8002264 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002220:	2b00      	cmp	r3, #0
 8002222:	d11f      	bne.n	8002264 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800222e:	2b00      	cmp	r3, #0
 8002230:	d006      	beq.n	8002240 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800223c:	2b00      	cmp	r3, #0
 800223e:	d111      	bne.n	8002264 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d105      	bne.n	8002264 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	f043 0201 	orr.w	r2, r3, #1
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800227c:	4618      	mov	r0, r3
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800229c:	2b01      	cmp	r3, #1
 800229e:	d101      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x1c>
 80022a0:	2302      	movs	r3, #2
 80022a2:	e113      	b.n	80024cc <HAL_ADC_ConfigChannel+0x244>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b09      	cmp	r3, #9
 80022b2:	d925      	bls.n	8002300 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68d9      	ldr	r1, [r3, #12]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	b29b      	uxth	r3, r3
 80022c0:	461a      	mov	r2, r3
 80022c2:	4613      	mov	r3, r2
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	4413      	add	r3, r2
 80022c8:	3b1e      	subs	r3, #30
 80022ca:	2207      	movs	r2, #7
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43da      	mvns	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	400a      	ands	r2, r1
 80022d8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68d9      	ldr	r1, [r3, #12]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	4618      	mov	r0, r3
 80022ec:	4603      	mov	r3, r0
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4403      	add	r3, r0
 80022f2:	3b1e      	subs	r3, #30
 80022f4:	409a      	lsls	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	e022      	b.n	8002346 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6919      	ldr	r1, [r3, #16]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	b29b      	uxth	r3, r3
 800230c:	461a      	mov	r2, r3
 800230e:	4613      	mov	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4413      	add	r3, r2
 8002314:	2207      	movs	r2, #7
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43da      	mvns	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	400a      	ands	r2, r1
 8002322:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6919      	ldr	r1, [r3, #16]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	b29b      	uxth	r3, r3
 8002334:	4618      	mov	r0, r3
 8002336:	4603      	mov	r3, r0
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	4403      	add	r3, r0
 800233c:	409a      	lsls	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b06      	cmp	r3, #6
 800234c:	d824      	bhi.n	8002398 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	3b05      	subs	r3, #5
 8002360:	221f      	movs	r2, #31
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43da      	mvns	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	400a      	ands	r2, r1
 800236e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	b29b      	uxth	r3, r3
 800237c:	4618      	mov	r0, r3
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	3b05      	subs	r3, #5
 800238a:	fa00 f203 	lsl.w	r2, r0, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	635a      	str	r2, [r3, #52]	; 0x34
 8002396:	e04c      	b.n	8002432 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b0c      	cmp	r3, #12
 800239e:	d824      	bhi.n	80023ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	3b23      	subs	r3, #35	; 0x23
 80023b2:	221f      	movs	r2, #31
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43da      	mvns	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	400a      	ands	r2, r1
 80023c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	4618      	mov	r0, r3
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	3b23      	subs	r3, #35	; 0x23
 80023dc:	fa00 f203 	lsl.w	r2, r0, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
 80023e8:	e023      	b.n	8002432 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	3b41      	subs	r3, #65	; 0x41
 80023fc:	221f      	movs	r2, #31
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43da      	mvns	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	400a      	ands	r2, r1
 800240a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	b29b      	uxth	r3, r3
 8002418:	4618      	mov	r0, r3
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	3b41      	subs	r3, #65	; 0x41
 8002426:	fa00 f203 	lsl.w	r2, r0, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002432:	4b29      	ldr	r3, [pc, #164]	; (80024d8 <HAL_ADC_ConfigChannel+0x250>)
 8002434:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a28      	ldr	r2, [pc, #160]	; (80024dc <HAL_ADC_ConfigChannel+0x254>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d10f      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x1d8>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b12      	cmp	r3, #18
 8002446:	d10b      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <HAL_ADC_ConfigChannel+0x254>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d12b      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x23a>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a1c      	ldr	r2, [pc, #112]	; (80024e0 <HAL_ADC_ConfigChannel+0x258>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d003      	beq.n	800247c <HAL_ADC_ConfigChannel+0x1f4>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b11      	cmp	r3, #17
 800247a:	d122      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a11      	ldr	r2, [pc, #68]	; (80024e0 <HAL_ADC_ConfigChannel+0x258>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d111      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800249e:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <HAL_ADC_ConfigChannel+0x25c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a11      	ldr	r2, [pc, #68]	; (80024e8 <HAL_ADC_ConfigChannel+0x260>)
 80024a4:	fba2 2303 	umull	r2, r3, r2, r3
 80024a8:	0c9a      	lsrs	r2, r3, #18
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024b4:	e002      	b.n	80024bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f9      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	40012300 	.word	0x40012300
 80024dc:	40012000 	.word	0x40012000
 80024e0:	10000012 	.word	0x10000012
 80024e4:	20000000 	.word	0x20000000
 80024e8:	431bde83 	.word	0x431bde83

080024ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024f4:	4b79      	ldr	r3, [pc, #484]	; (80026dc <ADC_Init+0x1f0>)
 80024f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	431a      	orrs	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002520:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6859      	ldr	r1, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	021a      	lsls	r2, r3, #8
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002544:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6859      	ldr	r1, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002566:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6899      	ldr	r1, [r3, #8]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257e:	4a58      	ldr	r2, [pc, #352]	; (80026e0 <ADC_Init+0x1f4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d022      	beq.n	80025ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002592:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6899      	ldr	r1, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6899      	ldr	r1, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	e00f      	b.n	80025ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0202 	bic.w	r2, r2, #2
 80025f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6899      	ldr	r1, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	7e1b      	ldrb	r3, [r3, #24]
 8002604:	005a      	lsls	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d01b      	beq.n	8002650 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002626:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002636:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6859      	ldr	r1, [r3, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	3b01      	subs	r3, #1
 8002644:	035a      	lsls	r2, r3, #13
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	e007      	b.n	8002660 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800265e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800266e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	3b01      	subs	r3, #1
 800267c:	051a      	lsls	r2, r3, #20
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002694:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6899      	ldr	r1, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026a2:	025a      	lsls	r2, r3, #9
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6899      	ldr	r1, [r3, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	029a      	lsls	r2, r3, #10
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	609a      	str	r2, [r3, #8]
}
 80026d0:	bf00      	nop
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	40012300 	.word	0x40012300
 80026e0:	0f000001 	.word	0x0f000001

080026e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002700:	4013      	ands	r3, r2
 8002702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800270c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002716:	4a04      	ldr	r2, [pc, #16]	; (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	60d3      	str	r3, [r2, #12]
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002730:	4b04      	ldr	r3, [pc, #16]	; (8002744 <__NVIC_GetPriorityGrouping+0x18>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	0a1b      	lsrs	r3, r3, #8
 8002736:	f003 0307 	and.w	r3, r3, #7
}
 800273a:	4618      	mov	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002756:	2b00      	cmp	r3, #0
 8002758:	db0b      	blt.n	8002772 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	f003 021f 	and.w	r2, r3, #31
 8002760:	4907      	ldr	r1, [pc, #28]	; (8002780 <__NVIC_EnableIRQ+0x38>)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	095b      	lsrs	r3, r3, #5
 8002768:	2001      	movs	r0, #1
 800276a:	fa00 f202 	lsl.w	r2, r0, r2
 800276e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000e100 	.word	0xe000e100

08002784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	6039      	str	r1, [r7, #0]
 800278e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002794:	2b00      	cmp	r3, #0
 8002796:	db0a      	blt.n	80027ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	b2da      	uxtb	r2, r3
 800279c:	490c      	ldr	r1, [pc, #48]	; (80027d0 <__NVIC_SetPriority+0x4c>)
 800279e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a2:	0112      	lsls	r2, r2, #4
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	440b      	add	r3, r1
 80027a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027ac:	e00a      	b.n	80027c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	4908      	ldr	r1, [pc, #32]	; (80027d4 <__NVIC_SetPriority+0x50>)
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	3b04      	subs	r3, #4
 80027bc:	0112      	lsls	r2, r2, #4
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	440b      	add	r3, r1
 80027c2:	761a      	strb	r2, [r3, #24]
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	e000e100 	.word	0xe000e100
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d8:	b480      	push	{r7}
 80027da:	b089      	sub	sp, #36	; 0x24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f1c3 0307 	rsb	r3, r3, #7
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	bf28      	it	cs
 80027f6:	2304      	movcs	r3, #4
 80027f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3304      	adds	r3, #4
 80027fe:	2b06      	cmp	r3, #6
 8002800:	d902      	bls.n	8002808 <NVIC_EncodePriority+0x30>
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3b03      	subs	r3, #3
 8002806:	e000      	b.n	800280a <NVIC_EncodePriority+0x32>
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800280c:	f04f 32ff 	mov.w	r2, #4294967295
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43da      	mvns	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	401a      	ands	r2, r3
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002820:	f04f 31ff 	mov.w	r1, #4294967295
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	fa01 f303 	lsl.w	r3, r1, r3
 800282a:	43d9      	mvns	r1, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002830:	4313      	orrs	r3, r2
         );
}
 8002832:	4618      	mov	r0, r3
 8002834:	3724      	adds	r7, #36	; 0x24
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
	...

08002840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3b01      	subs	r3, #1
 800284c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002850:	d301      	bcc.n	8002856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002852:	2301      	movs	r3, #1
 8002854:	e00f      	b.n	8002876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002856:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <SysTick_Config+0x40>)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3b01      	subs	r3, #1
 800285c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800285e:	210f      	movs	r1, #15
 8002860:	f04f 30ff 	mov.w	r0, #4294967295
 8002864:	f7ff ff8e 	bl	8002784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <SysTick_Config+0x40>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800286e:	4b04      	ldr	r3, [pc, #16]	; (8002880 <SysTick_Config+0x40>)
 8002870:	2207      	movs	r2, #7
 8002872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	e000e010 	.word	0xe000e010

08002884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff ff29 	bl	80026e4 <__NVIC_SetPriorityGrouping>
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800289a:	b580      	push	{r7, lr}
 800289c:	b086      	sub	sp, #24
 800289e:	af00      	add	r7, sp, #0
 80028a0:	4603      	mov	r3, r0
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
 80028a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028ac:	f7ff ff3e 	bl	800272c <__NVIC_GetPriorityGrouping>
 80028b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68b9      	ldr	r1, [r7, #8]
 80028b6:	6978      	ldr	r0, [r7, #20]
 80028b8:	f7ff ff8e 	bl	80027d8 <NVIC_EncodePriority>
 80028bc:	4602      	mov	r2, r0
 80028be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ff5d 	bl	8002784 <__NVIC_SetPriority>
}
 80028ca:	bf00      	nop
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	4603      	mov	r3, r0
 80028da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff31 	bl	8002748 <__NVIC_EnableIRQ>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff ffa2 	bl	8002840 <SysTick_Config>
 80028fc:	4603      	mov	r3, r0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002914:	f7ff faf8 	bl	8001f08 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e099      	b.n	8002a58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0201 	bic.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002944:	e00f      	b.n	8002966 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002946:	f7ff fadf 	bl	8001f08 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b05      	cmp	r3, #5
 8002952:	d908      	bls.n	8002966 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2220      	movs	r2, #32
 8002958:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2203      	movs	r2, #3
 800295e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e078      	b.n	8002a58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1e8      	bne.n	8002946 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	4b38      	ldr	r3, [pc, #224]	; (8002a60 <HAL_DMA_Init+0x158>)
 8002980:	4013      	ands	r3, r2
 8002982:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002992:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800299e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d107      	bne.n	80029d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	4313      	orrs	r3, r2
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f023 0307 	bic.w	r3, r3, #7
 80029e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d117      	bne.n	8002a2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00e      	beq.n	8002a2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 fa7b 	bl	8002f08 <DMA_CheckFifoParam>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2240      	movs	r2, #64	; 0x40
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a26:	2301      	movs	r3, #1
 8002a28:	e016      	b.n	8002a58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 fa32 	bl	8002e9c <DMA_CalcBaseAndBitshift>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a40:	223f      	movs	r2, #63	; 0x3f
 8002a42:	409a      	lsls	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	f010803f 	.word	0xf010803f

08002a64 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a70:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a72:	f7ff fa49 	bl	8001f08 <HAL_GetTick>
 8002a76:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d008      	beq.n	8002a96 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2280      	movs	r2, #128	; 0x80
 8002a88:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e052      	b.n	8002b3c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0216 	bic.w	r2, r2, #22
 8002aa4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ab4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d103      	bne.n	8002ac6 <HAL_DMA_Abort+0x62>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d007      	beq.n	8002ad6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0208 	bic.w	r2, r2, #8
 8002ad4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0201 	bic.w	r2, r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ae6:	e013      	b.n	8002b10 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ae8:	f7ff fa0e 	bl	8001f08 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b05      	cmp	r3, #5
 8002af4:	d90c      	bls.n	8002b10 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2220      	movs	r2, #32
 8002afa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2203      	movs	r2, #3
 8002b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e015      	b.n	8002b3c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1e4      	bne.n	8002ae8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b22:	223f      	movs	r2, #63	; 0x3f
 8002b24:	409a      	lsls	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d004      	beq.n	8002b62 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2280      	movs	r2, #128	; 0x80
 8002b5c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e00c      	b.n	8002b7c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2205      	movs	r2, #5
 8002b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0201 	bic.w	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b94:	4b8e      	ldr	r3, [pc, #568]	; (8002dd0 <HAL_DMA_IRQHandler+0x248>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a8e      	ldr	r2, [pc, #568]	; (8002dd4 <HAL_DMA_IRQHandler+0x24c>)
 8002b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9e:	0a9b      	lsrs	r3, r3, #10
 8002ba0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb2:	2208      	movs	r2, #8
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d01a      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d013      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0204 	bic.w	r2, r2, #4
 8002bda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be0:	2208      	movs	r2, #8
 8002be2:	409a      	lsls	r2, r3
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bec:	f043 0201 	orr.w	r2, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	409a      	lsls	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d012      	beq.n	8002c2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00b      	beq.n	8002c2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c16:	2201      	movs	r2, #1
 8002c18:	409a      	lsls	r2, r3
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c22:	f043 0202 	orr.w	r2, r3, #2
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2e:	2204      	movs	r2, #4
 8002c30:	409a      	lsls	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d012      	beq.n	8002c60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00b      	beq.n	8002c60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c58:	f043 0204 	orr.w	r2, r3, #4
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c64:	2210      	movs	r2, #16
 8002c66:	409a      	lsls	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d043      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d03c      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c82:	2210      	movs	r2, #16
 8002c84:	409a      	lsls	r2, r3
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d018      	beq.n	8002cca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d108      	bne.n	8002cb8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d024      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	4798      	blx	r3
 8002cb6:	e01f      	b.n	8002cf8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d01b      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	4798      	blx	r3
 8002cc8:	e016      	b.n	8002cf8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d107      	bne.n	8002ce8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0208 	bic.w	r2, r2, #8
 8002ce6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 808f 	beq.w	8002e28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 8087 	beq.w	8002e28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1e:	2220      	movs	r2, #32
 8002d20:	409a      	lsls	r2, r3
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b05      	cmp	r3, #5
 8002d30:	d136      	bne.n	8002da0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0216 	bic.w	r2, r2, #22
 8002d40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695a      	ldr	r2, [r3, #20]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d103      	bne.n	8002d62 <HAL_DMA_IRQHandler+0x1da>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d007      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0208 	bic.w	r2, r2, #8
 8002d70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d76:	223f      	movs	r2, #63	; 0x3f
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d07e      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	4798      	blx	r3
        }
        return;
 8002d9e:	e079      	b.n	8002e94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d01d      	beq.n	8002dea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10d      	bne.n	8002dd8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d031      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	4798      	blx	r3
 8002dcc:	e02c      	b.n	8002e28 <HAL_DMA_IRQHandler+0x2a0>
 8002dce:	bf00      	nop
 8002dd0:	20000000 	.word	0x20000000
 8002dd4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d023      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	4798      	blx	r3
 8002de8:	e01e      	b.n	8002e28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10f      	bne.n	8002e18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0210 	bic.w	r2, r2, #16
 8002e06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d032      	beq.n	8002e96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d022      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2205      	movs	r2, #5
 8002e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0201 	bic.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	3301      	adds	r3, #1
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d307      	bcc.n	8002e70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f2      	bne.n	8002e54 <HAL_DMA_IRQHandler+0x2cc>
 8002e6e:	e000      	b.n	8002e72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	4798      	blx	r3
 8002e92:	e000      	b.n	8002e96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e94:	bf00      	nop
    }
  }
}
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	3b10      	subs	r3, #16
 8002eac:	4a14      	ldr	r2, [pc, #80]	; (8002f00 <DMA_CalcBaseAndBitshift+0x64>)
 8002eae:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb2:	091b      	lsrs	r3, r3, #4
 8002eb4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002eb6:	4a13      	ldr	r2, [pc, #76]	; (8002f04 <DMA_CalcBaseAndBitshift+0x68>)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4413      	add	r3, r2
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d909      	bls.n	8002ede <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ed2:	f023 0303 	bic.w	r3, r3, #3
 8002ed6:	1d1a      	adds	r2, r3, #4
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	659a      	str	r2, [r3, #88]	; 0x58
 8002edc:	e007      	b.n	8002eee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ee6:	f023 0303 	bic.w	r3, r3, #3
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	aaaaaaab 	.word	0xaaaaaaab
 8002f04:	08006494 	.word	0x08006494

08002f08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d11f      	bne.n	8002f62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2b03      	cmp	r3, #3
 8002f26:	d856      	bhi.n	8002fd6 <DMA_CheckFifoParam+0xce>
 8002f28:	a201      	add	r2, pc, #4	; (adr r2, 8002f30 <DMA_CheckFifoParam+0x28>)
 8002f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2e:	bf00      	nop
 8002f30:	08002f41 	.word	0x08002f41
 8002f34:	08002f53 	.word	0x08002f53
 8002f38:	08002f41 	.word	0x08002f41
 8002f3c:	08002fd7 	.word	0x08002fd7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d046      	beq.n	8002fda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f50:	e043      	b.n	8002fda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f5a:	d140      	bne.n	8002fde <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f60:	e03d      	b.n	8002fde <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f6a:	d121      	bne.n	8002fb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d837      	bhi.n	8002fe2 <DMA_CheckFifoParam+0xda>
 8002f72:	a201      	add	r2, pc, #4	; (adr r2, 8002f78 <DMA_CheckFifoParam+0x70>)
 8002f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f78:	08002f89 	.word	0x08002f89
 8002f7c:	08002f8f 	.word	0x08002f8f
 8002f80:	08002f89 	.word	0x08002f89
 8002f84:	08002fa1 	.word	0x08002fa1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f8c:	e030      	b.n	8002ff0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d025      	beq.n	8002fe6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f9e:	e022      	b.n	8002fe6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fa8:	d11f      	bne.n	8002fea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fae:	e01c      	b.n	8002fea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d903      	bls.n	8002fbe <DMA_CheckFifoParam+0xb6>
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d003      	beq.n	8002fc4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fbc:	e018      	b.n	8002ff0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	73fb      	strb	r3, [r7, #15]
      break;
 8002fc2:	e015      	b.n	8002ff0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00e      	beq.n	8002fee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd4:	e00b      	b.n	8002fee <DMA_CheckFifoParam+0xe6>
      break;
 8002fd6:	bf00      	nop
 8002fd8:	e00a      	b.n	8002ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fda:	bf00      	nop
 8002fdc:	e008      	b.n	8002ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fde:	bf00      	nop
 8002fe0:	e006      	b.n	8002ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fe2:	bf00      	nop
 8002fe4:	e004      	b.n	8002ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fe6:	bf00      	nop
 8002fe8:	e002      	b.n	8002ff0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002fea:	bf00      	nop
 8002fec:	e000      	b.n	8002ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fee:	bf00      	nop
    }
  } 
  
  return status; 
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop

08003000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003000:	b480      	push	{r7}
 8003002:	b089      	sub	sp, #36	; 0x24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800300e:	2300      	movs	r3, #0
 8003010:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003012:	2300      	movs	r3, #0
 8003014:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
 800301a:	e159      	b.n	80032d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800301c:	2201      	movs	r2, #1
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	4013      	ands	r3, r2
 800302e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	429a      	cmp	r2, r3
 8003036:	f040 8148 	bne.w	80032ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	2b01      	cmp	r3, #1
 8003044:	d005      	beq.n	8003052 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800304e:	2b02      	cmp	r3, #2
 8003050:	d130      	bne.n	80030b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	2203      	movs	r2, #3
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43db      	mvns	r3, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4013      	ands	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4313      	orrs	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003088:	2201      	movs	r2, #1
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	091b      	lsrs	r3, r3, #4
 800309e:	f003 0201 	and.w	r2, r3, #1
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	2b03      	cmp	r3, #3
 80030be:	d017      	beq.n	80030f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	2203      	movs	r2, #3
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4013      	ands	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f003 0303 	and.w	r3, r3, #3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d123      	bne.n	8003144 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	08da      	lsrs	r2, r3, #3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3208      	adds	r2, #8
 8003104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003108:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	220f      	movs	r2, #15
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4013      	ands	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	08da      	lsrs	r2, r3, #3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3208      	adds	r2, #8
 800313e:	69b9      	ldr	r1, [r7, #24]
 8003140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	2203      	movs	r2, #3
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4013      	ands	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 0203 	and.w	r2, r3, #3
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 80a2 	beq.w	80032ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	4b57      	ldr	r3, [pc, #348]	; (80032e8 <HAL_GPIO_Init+0x2e8>)
 800318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318e:	4a56      	ldr	r2, [pc, #344]	; (80032e8 <HAL_GPIO_Init+0x2e8>)
 8003190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003194:	6453      	str	r3, [r2, #68]	; 0x44
 8003196:	4b54      	ldr	r3, [pc, #336]	; (80032e8 <HAL_GPIO_Init+0x2e8>)
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031a2:	4a52      	ldr	r2, [pc, #328]	; (80032ec <HAL_GPIO_Init+0x2ec>)
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	089b      	lsrs	r3, r3, #2
 80031a8:	3302      	adds	r3, #2
 80031aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	220f      	movs	r2, #15
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43db      	mvns	r3, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4013      	ands	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a49      	ldr	r2, [pc, #292]	; (80032f0 <HAL_GPIO_Init+0x2f0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d019      	beq.n	8003202 <HAL_GPIO_Init+0x202>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a48      	ldr	r2, [pc, #288]	; (80032f4 <HAL_GPIO_Init+0x2f4>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d013      	beq.n	80031fe <HAL_GPIO_Init+0x1fe>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a47      	ldr	r2, [pc, #284]	; (80032f8 <HAL_GPIO_Init+0x2f8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00d      	beq.n	80031fa <HAL_GPIO_Init+0x1fa>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a46      	ldr	r2, [pc, #280]	; (80032fc <HAL_GPIO_Init+0x2fc>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d007      	beq.n	80031f6 <HAL_GPIO_Init+0x1f6>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a45      	ldr	r2, [pc, #276]	; (8003300 <HAL_GPIO_Init+0x300>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d101      	bne.n	80031f2 <HAL_GPIO_Init+0x1f2>
 80031ee:	2304      	movs	r3, #4
 80031f0:	e008      	b.n	8003204 <HAL_GPIO_Init+0x204>
 80031f2:	2307      	movs	r3, #7
 80031f4:	e006      	b.n	8003204 <HAL_GPIO_Init+0x204>
 80031f6:	2303      	movs	r3, #3
 80031f8:	e004      	b.n	8003204 <HAL_GPIO_Init+0x204>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e002      	b.n	8003204 <HAL_GPIO_Init+0x204>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <HAL_GPIO_Init+0x204>
 8003202:	2300      	movs	r3, #0
 8003204:	69fa      	ldr	r2, [r7, #28]
 8003206:	f002 0203 	and.w	r2, r2, #3
 800320a:	0092      	lsls	r2, r2, #2
 800320c:	4093      	lsls	r3, r2
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003214:	4935      	ldr	r1, [pc, #212]	; (80032ec <HAL_GPIO_Init+0x2ec>)
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	089b      	lsrs	r3, r3, #2
 800321a:	3302      	adds	r3, #2
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003222:	4b38      	ldr	r3, [pc, #224]	; (8003304 <HAL_GPIO_Init+0x304>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	43db      	mvns	r3, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4013      	ands	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003246:	4a2f      	ldr	r2, [pc, #188]	; (8003304 <HAL_GPIO_Init+0x304>)
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800324c:	4b2d      	ldr	r3, [pc, #180]	; (8003304 <HAL_GPIO_Init+0x304>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	43db      	mvns	r3, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4013      	ands	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003270:	4a24      	ldr	r2, [pc, #144]	; (8003304 <HAL_GPIO_Init+0x304>)
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003276:	4b23      	ldr	r3, [pc, #140]	; (8003304 <HAL_GPIO_Init+0x304>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	43db      	mvns	r3, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4013      	ands	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800329a:	4a1a      	ldr	r2, [pc, #104]	; (8003304 <HAL_GPIO_Init+0x304>)
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032a0:	4b18      	ldr	r3, [pc, #96]	; (8003304 <HAL_GPIO_Init+0x304>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	43db      	mvns	r3, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032c4:	4a0f      	ldr	r2, [pc, #60]	; (8003304 <HAL_GPIO_Init+0x304>)
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	3301      	adds	r3, #1
 80032ce:	61fb      	str	r3, [r7, #28]
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	2b0f      	cmp	r3, #15
 80032d4:	f67f aea2 	bls.w	800301c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032d8:	bf00      	nop
 80032da:	bf00      	nop
 80032dc:	3724      	adds	r7, #36	; 0x24
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40023800 	.word	0x40023800
 80032ec:	40013800 	.word	0x40013800
 80032f0:	40020000 	.word	0x40020000
 80032f4:	40020400 	.word	0x40020400
 80032f8:	40020800 	.word	0x40020800
 80032fc:	40020c00 	.word	0x40020c00
 8003300:	40021000 	.word	0x40021000
 8003304:	40013c00 	.word	0x40013c00

08003308 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	460b      	mov	r3, r1
 8003312:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	887b      	ldrh	r3, [r7, #2]
 800331a:	4013      	ands	r3, r2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d002      	beq.n	8003326 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003320:	2301      	movs	r3, #1
 8003322:	73fb      	strb	r3, [r7, #15]
 8003324:	e001      	b.n	800332a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003326:	2300      	movs	r3, #0
 8003328:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800332a:	7bfb      	ldrb	r3, [r7, #15]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	807b      	strh	r3, [r7, #2]
 8003344:	4613      	mov	r3, r2
 8003346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003348:	787b      	ldrb	r3, [r7, #1]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800334e:	887a      	ldrh	r2, [r7, #2]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003354:	e003      	b.n	800335e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003356:	887b      	ldrh	r3, [r7, #2]
 8003358:	041a      	lsls	r2, r3, #16
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	619a      	str	r2, [r3, #24]
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
	...

0800336c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e267      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d075      	beq.n	8003476 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800338a:	4b88      	ldr	r3, [pc, #544]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 030c 	and.w	r3, r3, #12
 8003392:	2b04      	cmp	r3, #4
 8003394:	d00c      	beq.n	80033b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003396:	4b85      	ldr	r3, [pc, #532]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800339e:	2b08      	cmp	r3, #8
 80033a0:	d112      	bne.n	80033c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033a2:	4b82      	ldr	r3, [pc, #520]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ae:	d10b      	bne.n	80033c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b0:	4b7e      	ldr	r3, [pc, #504]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d05b      	beq.n	8003474 <HAL_RCC_OscConfig+0x108>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d157      	bne.n	8003474 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e242      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d0:	d106      	bne.n	80033e0 <HAL_RCC_OscConfig+0x74>
 80033d2:	4b76      	ldr	r3, [pc, #472]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a75      	ldr	r2, [pc, #468]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 80033d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	e01d      	b.n	800341c <HAL_RCC_OscConfig+0xb0>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033e8:	d10c      	bne.n	8003404 <HAL_RCC_OscConfig+0x98>
 80033ea:	4b70      	ldr	r3, [pc, #448]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a6f      	ldr	r2, [pc, #444]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 80033f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	4b6d      	ldr	r3, [pc, #436]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a6c      	ldr	r2, [pc, #432]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 80033fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	e00b      	b.n	800341c <HAL_RCC_OscConfig+0xb0>
 8003404:	4b69      	ldr	r3, [pc, #420]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a68      	ldr	r2, [pc, #416]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 800340a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800340e:	6013      	str	r3, [r2, #0]
 8003410:	4b66      	ldr	r3, [pc, #408]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a65      	ldr	r2, [pc, #404]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 8003416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800341a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d013      	beq.n	800344c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003424:	f7fe fd70 	bl	8001f08 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800342c:	f7fe fd6c 	bl	8001f08 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b64      	cmp	r3, #100	; 0x64
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e207      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343e:	4b5b      	ldr	r3, [pc, #364]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCC_OscConfig+0xc0>
 800344a:	e014      	b.n	8003476 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344c:	f7fe fd5c 	bl	8001f08 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003454:	f7fe fd58 	bl	8001f08 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b64      	cmp	r3, #100	; 0x64
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e1f3      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003466:	4b51      	ldr	r3, [pc, #324]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f0      	bne.n	8003454 <HAL_RCC_OscConfig+0xe8>
 8003472:	e000      	b.n	8003476 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d063      	beq.n	800354a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003482:	4b4a      	ldr	r3, [pc, #296]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 030c 	and.w	r3, r3, #12
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00b      	beq.n	80034a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800348e:	4b47      	ldr	r3, [pc, #284]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003496:	2b08      	cmp	r3, #8
 8003498:	d11c      	bne.n	80034d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800349a:	4b44      	ldr	r3, [pc, #272]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d116      	bne.n	80034d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a6:	4b41      	ldr	r3, [pc, #260]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d005      	beq.n	80034be <HAL_RCC_OscConfig+0x152>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d001      	beq.n	80034be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e1c7      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034be:	4b3b      	ldr	r3, [pc, #236]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4937      	ldr	r1, [pc, #220]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d2:	e03a      	b.n	800354a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d020      	beq.n	800351e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034dc:	4b34      	ldr	r3, [pc, #208]	; (80035b0 <HAL_RCC_OscConfig+0x244>)
 80034de:	2201      	movs	r2, #1
 80034e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e2:	f7fe fd11 	bl	8001f08 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ea:	f7fe fd0d 	bl	8001f08 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e1a8      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034fc:	4b2b      	ldr	r3, [pc, #172]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0f0      	beq.n	80034ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003508:	4b28      	ldr	r3, [pc, #160]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	4925      	ldr	r1, [pc, #148]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 8003518:	4313      	orrs	r3, r2
 800351a:	600b      	str	r3, [r1, #0]
 800351c:	e015      	b.n	800354a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800351e:	4b24      	ldr	r3, [pc, #144]	; (80035b0 <HAL_RCC_OscConfig+0x244>)
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003524:	f7fe fcf0 	bl	8001f08 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800352c:	f7fe fcec 	bl	8001f08 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e187      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800353e:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1f0      	bne.n	800352c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b00      	cmp	r3, #0
 8003554:	d036      	beq.n	80035c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d016      	beq.n	800358c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800355e:	4b15      	ldr	r3, [pc, #84]	; (80035b4 <HAL_RCC_OscConfig+0x248>)
 8003560:	2201      	movs	r2, #1
 8003562:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003564:	f7fe fcd0 	bl	8001f08 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800356c:	f7fe fccc 	bl	8001f08 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e167      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800357e:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 8003580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0f0      	beq.n	800356c <HAL_RCC_OscConfig+0x200>
 800358a:	e01b      	b.n	80035c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800358c:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <HAL_RCC_OscConfig+0x248>)
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003592:	f7fe fcb9 	bl	8001f08 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003598:	e00e      	b.n	80035b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800359a:	f7fe fcb5 	bl	8001f08 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d907      	bls.n	80035b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e150      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
 80035ac:	40023800 	.word	0x40023800
 80035b0:	42470000 	.word	0x42470000
 80035b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b8:	4b88      	ldr	r3, [pc, #544]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 80035ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1ea      	bne.n	800359a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 8097 	beq.w	8003700 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035d2:	2300      	movs	r3, #0
 80035d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035d6:	4b81      	ldr	r3, [pc, #516]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10f      	bne.n	8003602 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	4b7d      	ldr	r3, [pc, #500]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	4a7c      	ldr	r2, [pc, #496]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 80035ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f0:	6413      	str	r3, [r2, #64]	; 0x40
 80035f2:	4b7a      	ldr	r3, [pc, #488]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fa:	60bb      	str	r3, [r7, #8]
 80035fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035fe:	2301      	movs	r3, #1
 8003600:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003602:	4b77      	ldr	r3, [pc, #476]	; (80037e0 <HAL_RCC_OscConfig+0x474>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360a:	2b00      	cmp	r3, #0
 800360c:	d118      	bne.n	8003640 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800360e:	4b74      	ldr	r3, [pc, #464]	; (80037e0 <HAL_RCC_OscConfig+0x474>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a73      	ldr	r2, [pc, #460]	; (80037e0 <HAL_RCC_OscConfig+0x474>)
 8003614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003618:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800361a:	f7fe fc75 	bl	8001f08 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003622:	f7fe fc71 	bl	8001f08 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e10c      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003634:	4b6a      	ldr	r3, [pc, #424]	; (80037e0 <HAL_RCC_OscConfig+0x474>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0f0      	beq.n	8003622 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d106      	bne.n	8003656 <HAL_RCC_OscConfig+0x2ea>
 8003648:	4b64      	ldr	r3, [pc, #400]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 800364a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364c:	4a63      	ldr	r2, [pc, #396]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	6713      	str	r3, [r2, #112]	; 0x70
 8003654:	e01c      	b.n	8003690 <HAL_RCC_OscConfig+0x324>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2b05      	cmp	r3, #5
 800365c:	d10c      	bne.n	8003678 <HAL_RCC_OscConfig+0x30c>
 800365e:	4b5f      	ldr	r3, [pc, #380]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 8003660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003662:	4a5e      	ldr	r2, [pc, #376]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 8003664:	f043 0304 	orr.w	r3, r3, #4
 8003668:	6713      	str	r3, [r2, #112]	; 0x70
 800366a:	4b5c      	ldr	r3, [pc, #368]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 800366c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366e:	4a5b      	ldr	r2, [pc, #364]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	6713      	str	r3, [r2, #112]	; 0x70
 8003676:	e00b      	b.n	8003690 <HAL_RCC_OscConfig+0x324>
 8003678:	4b58      	ldr	r3, [pc, #352]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 800367a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367c:	4a57      	ldr	r2, [pc, #348]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 800367e:	f023 0301 	bic.w	r3, r3, #1
 8003682:	6713      	str	r3, [r2, #112]	; 0x70
 8003684:	4b55      	ldr	r3, [pc, #340]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	4a54      	ldr	r2, [pc, #336]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 800368a:	f023 0304 	bic.w	r3, r3, #4
 800368e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d015      	beq.n	80036c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003698:	f7fe fc36 	bl	8001f08 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369e:	e00a      	b.n	80036b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a0:	f7fe fc32 	bl	8001f08 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e0cb      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b6:	4b49      	ldr	r3, [pc, #292]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 80036b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0ee      	beq.n	80036a0 <HAL_RCC_OscConfig+0x334>
 80036c2:	e014      	b.n	80036ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c4:	f7fe fc20 	bl	8001f08 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ca:	e00a      	b.n	80036e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036cc:	f7fe fc1c 	bl	8001f08 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036da:	4293      	cmp	r3, r2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e0b5      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036e2:	4b3e      	ldr	r3, [pc, #248]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 80036e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1ee      	bne.n	80036cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036ee:	7dfb      	ldrb	r3, [r7, #23]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d105      	bne.n	8003700 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f4:	4b39      	ldr	r3, [pc, #228]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	4a38      	ldr	r2, [pc, #224]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 80036fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 80a1 	beq.w	800384c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800370a:	4b34      	ldr	r3, [pc, #208]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 030c 	and.w	r3, r3, #12
 8003712:	2b08      	cmp	r3, #8
 8003714:	d05c      	beq.n	80037d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	2b02      	cmp	r3, #2
 800371c:	d141      	bne.n	80037a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371e:	4b31      	ldr	r3, [pc, #196]	; (80037e4 <HAL_RCC_OscConfig+0x478>)
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003724:	f7fe fbf0 	bl	8001f08 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800372c:	f7fe fbec 	bl	8001f08 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e087      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373e:	4b27      	ldr	r3, [pc, #156]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f0      	bne.n	800372c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69da      	ldr	r2, [r3, #28]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	019b      	lsls	r3, r3, #6
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003760:	085b      	lsrs	r3, r3, #1
 8003762:	3b01      	subs	r3, #1
 8003764:	041b      	lsls	r3, r3, #16
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	061b      	lsls	r3, r3, #24
 800376e:	491b      	ldr	r1, [pc, #108]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 8003770:	4313      	orrs	r3, r2
 8003772:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003774:	4b1b      	ldr	r3, [pc, #108]	; (80037e4 <HAL_RCC_OscConfig+0x478>)
 8003776:	2201      	movs	r2, #1
 8003778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377a:	f7fe fbc5 	bl	8001f08 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003782:	f7fe fbc1 	bl	8001f08 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e05c      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003794:	4b11      	ldr	r3, [pc, #68]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0f0      	beq.n	8003782 <HAL_RCC_OscConfig+0x416>
 80037a0:	e054      	b.n	800384c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a2:	4b10      	ldr	r3, [pc, #64]	; (80037e4 <HAL_RCC_OscConfig+0x478>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a8:	f7fe fbae 	bl	8001f08 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b0:	f7fe fbaa 	bl	8001f08 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e045      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c2:	4b06      	ldr	r3, [pc, #24]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f0      	bne.n	80037b0 <HAL_RCC_OscConfig+0x444>
 80037ce:	e03d      	b.n	800384c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d107      	bne.n	80037e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e038      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40007000 	.word	0x40007000
 80037e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037e8:	4b1b      	ldr	r3, [pc, #108]	; (8003858 <HAL_RCC_OscConfig+0x4ec>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d028      	beq.n	8003848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003800:	429a      	cmp	r2, r3
 8003802:	d121      	bne.n	8003848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380e:	429a      	cmp	r2, r3
 8003810:	d11a      	bne.n	8003848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003818:	4013      	ands	r3, r2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800381e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003820:	4293      	cmp	r3, r2
 8003822:	d111      	bne.n	8003848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382e:	085b      	lsrs	r3, r3, #1
 8003830:	3b01      	subs	r3, #1
 8003832:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003834:	429a      	cmp	r2, r3
 8003836:	d107      	bne.n	8003848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003844:	429a      	cmp	r2, r3
 8003846:	d001      	beq.n	800384c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e000      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40023800 	.word	0x40023800

0800385c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e0cc      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003870:	4b68      	ldr	r3, [pc, #416]	; (8003a14 <HAL_RCC_ClockConfig+0x1b8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	429a      	cmp	r2, r3
 800387c:	d90c      	bls.n	8003898 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387e:	4b65      	ldr	r3, [pc, #404]	; (8003a14 <HAL_RCC_ClockConfig+0x1b8>)
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003886:	4b63      	ldr	r3, [pc, #396]	; (8003a14 <HAL_RCC_ClockConfig+0x1b8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	d001      	beq.n	8003898 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e0b8      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d020      	beq.n	80038e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038b0:	4b59      	ldr	r3, [pc, #356]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	4a58      	ldr	r2, [pc, #352]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 80038b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038c8:	4b53      	ldr	r3, [pc, #332]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	4a52      	ldr	r2, [pc, #328]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d4:	4b50      	ldr	r3, [pc, #320]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	494d      	ldr	r1, [pc, #308]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d044      	beq.n	800397c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d107      	bne.n	800390a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fa:	4b47      	ldr	r3, [pc, #284]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d119      	bne.n	800393a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e07f      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b02      	cmp	r3, #2
 8003910:	d003      	beq.n	800391a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003916:	2b03      	cmp	r3, #3
 8003918:	d107      	bne.n	800392a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800391a:	4b3f      	ldr	r3, [pc, #252]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d109      	bne.n	800393a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e06f      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800392a:	4b3b      	ldr	r3, [pc, #236]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e067      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800393a:	4b37      	ldr	r3, [pc, #220]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f023 0203 	bic.w	r2, r3, #3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	4934      	ldr	r1, [pc, #208]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	4313      	orrs	r3, r2
 800394a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800394c:	f7fe fadc 	bl	8001f08 <HAL_GetTick>
 8003950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003952:	e00a      	b.n	800396a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003954:	f7fe fad8 	bl	8001f08 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003962:	4293      	cmp	r3, r2
 8003964:	d901      	bls.n	800396a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e04f      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396a:	4b2b      	ldr	r3, [pc, #172]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 020c 	and.w	r2, r3, #12
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	429a      	cmp	r2, r3
 800397a:	d1eb      	bne.n	8003954 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800397c:	4b25      	ldr	r3, [pc, #148]	; (8003a14 <HAL_RCC_ClockConfig+0x1b8>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d20c      	bcs.n	80039a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398a:	4b22      	ldr	r3, [pc, #136]	; (8003a14 <HAL_RCC_ClockConfig+0x1b8>)
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003992:	4b20      	ldr	r3, [pc, #128]	; (8003a14 <HAL_RCC_ClockConfig+0x1b8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d001      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e032      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b0:	4b19      	ldr	r3, [pc, #100]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4916      	ldr	r1, [pc, #88]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d009      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ce:	4b12      	ldr	r3, [pc, #72]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	490e      	ldr	r1, [pc, #56]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039e2:	f000 f821 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 80039e6:	4602      	mov	r2, r0
 80039e8:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	091b      	lsrs	r3, r3, #4
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	490a      	ldr	r1, [pc, #40]	; (8003a1c <HAL_RCC_ClockConfig+0x1c0>)
 80039f4:	5ccb      	ldrb	r3, [r1, r3]
 80039f6:	fa22 f303 	lsr.w	r3, r2, r3
 80039fa:	4a09      	ldr	r2, [pc, #36]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 80039fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039fe:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fe fa3c 	bl	8001e80 <HAL_InitTick>

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40023c00 	.word	0x40023c00
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	0800647c 	.word	0x0800647c
 8003a20:	20000000 	.word	0x20000000
 8003a24:	20000004 	.word	0x20000004

08003a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a2c:	b094      	sub	sp, #80	; 0x50
 8003a2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	647b      	str	r3, [r7, #68]	; 0x44
 8003a34:	2300      	movs	r3, #0
 8003a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a38:	2300      	movs	r3, #0
 8003a3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a40:	4b79      	ldr	r3, [pc, #484]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 030c 	and.w	r3, r3, #12
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d00d      	beq.n	8003a68 <HAL_RCC_GetSysClockFreq+0x40>
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	f200 80e1 	bhi.w	8003c14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <HAL_RCC_GetSysClockFreq+0x34>
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d003      	beq.n	8003a62 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a5a:	e0db      	b.n	8003c14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a5c:	4b73      	ldr	r3, [pc, #460]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x204>)
 8003a5e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a60:	e0db      	b.n	8003c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a62:	4b73      	ldr	r3, [pc, #460]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a66:	e0d8      	b.n	8003c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a68:	4b6f      	ldr	r3, [pc, #444]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a70:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a72:	4b6d      	ldr	r3, [pc, #436]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d063      	beq.n	8003b46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a7e:	4b6a      	ldr	r3, [pc, #424]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	099b      	lsrs	r3, r3, #6
 8003a84:	2200      	movs	r2, #0
 8003a86:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a90:	633b      	str	r3, [r7, #48]	; 0x30
 8003a92:	2300      	movs	r3, #0
 8003a94:	637b      	str	r3, [r7, #52]	; 0x34
 8003a96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a9a:	4622      	mov	r2, r4
 8003a9c:	462b      	mov	r3, r5
 8003a9e:	f04f 0000 	mov.w	r0, #0
 8003aa2:	f04f 0100 	mov.w	r1, #0
 8003aa6:	0159      	lsls	r1, r3, #5
 8003aa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aac:	0150      	lsls	r0, r2, #5
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4621      	mov	r1, r4
 8003ab4:	1a51      	subs	r1, r2, r1
 8003ab6:	6139      	str	r1, [r7, #16]
 8003ab8:	4629      	mov	r1, r5
 8003aba:	eb63 0301 	sbc.w	r3, r3, r1
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003acc:	4659      	mov	r1, fp
 8003ace:	018b      	lsls	r3, r1, #6
 8003ad0:	4651      	mov	r1, sl
 8003ad2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ad6:	4651      	mov	r1, sl
 8003ad8:	018a      	lsls	r2, r1, #6
 8003ada:	4651      	mov	r1, sl
 8003adc:	ebb2 0801 	subs.w	r8, r2, r1
 8003ae0:	4659      	mov	r1, fp
 8003ae2:	eb63 0901 	sbc.w	r9, r3, r1
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003af2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003af6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003afa:	4690      	mov	r8, r2
 8003afc:	4699      	mov	r9, r3
 8003afe:	4623      	mov	r3, r4
 8003b00:	eb18 0303 	adds.w	r3, r8, r3
 8003b04:	60bb      	str	r3, [r7, #8]
 8003b06:	462b      	mov	r3, r5
 8003b08:	eb49 0303 	adc.w	r3, r9, r3
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	f04f 0200 	mov.w	r2, #0
 8003b12:	f04f 0300 	mov.w	r3, #0
 8003b16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b1a:	4629      	mov	r1, r5
 8003b1c:	024b      	lsls	r3, r1, #9
 8003b1e:	4621      	mov	r1, r4
 8003b20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b24:	4621      	mov	r1, r4
 8003b26:	024a      	lsls	r2, r1, #9
 8003b28:	4610      	mov	r0, r2
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b2e:	2200      	movs	r2, #0
 8003b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b38:	f7fc ff90 	bl	8000a5c <__aeabi_uldivmod>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	460b      	mov	r3, r1
 8003b40:	4613      	mov	r3, r2
 8003b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b44:	e058      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b46:	4b38      	ldr	r3, [pc, #224]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	099b      	lsrs	r3, r3, #6
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	4618      	mov	r0, r3
 8003b50:	4611      	mov	r1, r2
 8003b52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b56:	623b      	str	r3, [r7, #32]
 8003b58:	2300      	movs	r3, #0
 8003b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b60:	4642      	mov	r2, r8
 8003b62:	464b      	mov	r3, r9
 8003b64:	f04f 0000 	mov.w	r0, #0
 8003b68:	f04f 0100 	mov.w	r1, #0
 8003b6c:	0159      	lsls	r1, r3, #5
 8003b6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b72:	0150      	lsls	r0, r2, #5
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	4641      	mov	r1, r8
 8003b7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b7e:	4649      	mov	r1, r9
 8003b80:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b98:	ebb2 040a 	subs.w	r4, r2, sl
 8003b9c:	eb63 050b 	sbc.w	r5, r3, fp
 8003ba0:	f04f 0200 	mov.w	r2, #0
 8003ba4:	f04f 0300 	mov.w	r3, #0
 8003ba8:	00eb      	lsls	r3, r5, #3
 8003baa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bae:	00e2      	lsls	r2, r4, #3
 8003bb0:	4614      	mov	r4, r2
 8003bb2:	461d      	mov	r5, r3
 8003bb4:	4643      	mov	r3, r8
 8003bb6:	18e3      	adds	r3, r4, r3
 8003bb8:	603b      	str	r3, [r7, #0]
 8003bba:	464b      	mov	r3, r9
 8003bbc:	eb45 0303 	adc.w	r3, r5, r3
 8003bc0:	607b      	str	r3, [r7, #4]
 8003bc2:	f04f 0200 	mov.w	r2, #0
 8003bc6:	f04f 0300 	mov.w	r3, #0
 8003bca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bce:	4629      	mov	r1, r5
 8003bd0:	028b      	lsls	r3, r1, #10
 8003bd2:	4621      	mov	r1, r4
 8003bd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bd8:	4621      	mov	r1, r4
 8003bda:	028a      	lsls	r2, r1, #10
 8003bdc:	4610      	mov	r0, r2
 8003bde:	4619      	mov	r1, r3
 8003be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003be2:	2200      	movs	r2, #0
 8003be4:	61bb      	str	r3, [r7, #24]
 8003be6:	61fa      	str	r2, [r7, #28]
 8003be8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bec:	f7fc ff36 	bl	8000a5c <__aeabi_uldivmod>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bf8:	4b0b      	ldr	r3, [pc, #44]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	0c1b      	lsrs	r3, r3, #16
 8003bfe:	f003 0303 	and.w	r3, r3, #3
 8003c02:	3301      	adds	r3, #1
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c12:	e002      	b.n	8003c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c14:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x204>)
 8003c16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3750      	adds	r7, #80	; 0x50
 8003c20:	46bd      	mov	sp, r7
 8003c22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c26:	bf00      	nop
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	00f42400 	.word	0x00f42400
 8003c30:	007a1200 	.word	0x007a1200

08003c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c38:	4b03      	ldr	r3, [pc, #12]	; (8003c48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	20000000 	.word	0x20000000

08003c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c50:	f7ff fff0 	bl	8003c34 <HAL_RCC_GetHCLKFreq>
 8003c54:	4602      	mov	r2, r0
 8003c56:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	0a9b      	lsrs	r3, r3, #10
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	4903      	ldr	r1, [pc, #12]	; (8003c70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c62:	5ccb      	ldrb	r3, [r1, r3]
 8003c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	0800648c 	.word	0x0800648c

08003c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c78:	f7ff ffdc 	bl	8003c34 <HAL_RCC_GetHCLKFreq>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	0b5b      	lsrs	r3, r3, #13
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	4903      	ldr	r1, [pc, #12]	; (8003c98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c8a:	5ccb      	ldrb	r3, [r1, r3]
 8003c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40023800 	.word	0x40023800
 8003c98:	0800648c 	.word	0x0800648c

08003c9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e041      	b.n	8003d32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d106      	bne.n	8003cc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7fd fe30 	bl	8001928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4610      	mov	r0, r2
 8003cdc:	f000 fb1c 	bl	8004318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d001      	beq.n	8003d54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e03c      	b.n	8003dce <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a1e      	ldr	r2, [pc, #120]	; (8003ddc <HAL_TIM_Base_Start+0xa0>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d018      	beq.n	8003d98 <HAL_TIM_Base_Start+0x5c>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6e:	d013      	beq.n	8003d98 <HAL_TIM_Base_Start+0x5c>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a1a      	ldr	r2, [pc, #104]	; (8003de0 <HAL_TIM_Base_Start+0xa4>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d00e      	beq.n	8003d98 <HAL_TIM_Base_Start+0x5c>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a19      	ldr	r2, [pc, #100]	; (8003de4 <HAL_TIM_Base_Start+0xa8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d009      	beq.n	8003d98 <HAL_TIM_Base_Start+0x5c>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a17      	ldr	r2, [pc, #92]	; (8003de8 <HAL_TIM_Base_Start+0xac>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d004      	beq.n	8003d98 <HAL_TIM_Base_Start+0x5c>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a16      	ldr	r2, [pc, #88]	; (8003dec <HAL_TIM_Base_Start+0xb0>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d111      	bne.n	8003dbc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b06      	cmp	r3, #6
 8003da8:	d010      	beq.n	8003dcc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f042 0201 	orr.w	r2, r2, #1
 8003db8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dba:	e007      	b.n	8003dcc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0201 	orr.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40010000 	.word	0x40010000
 8003de0:	40000400 	.word	0x40000400
 8003de4:	40000800 	.word	0x40000800
 8003de8:	40000c00 	.word	0x40000c00
 8003dec:	40014000 	.word	0x40014000

08003df0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e041      	b.n	8003e86 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f839 	bl	8003e8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4610      	mov	r0, r2
 8003e30:	f000 fa72 	bl	8004318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
	...

08003ea4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d109      	bne.n	8003ec8 <HAL_TIM_PWM_Start+0x24>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	bf14      	ite	ne
 8003ec0:	2301      	movne	r3, #1
 8003ec2:	2300      	moveq	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	e022      	b.n	8003f0e <HAL_TIM_PWM_Start+0x6a>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d109      	bne.n	8003ee2 <HAL_TIM_PWM_Start+0x3e>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	bf14      	ite	ne
 8003eda:	2301      	movne	r3, #1
 8003edc:	2300      	moveq	r3, #0
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	e015      	b.n	8003f0e <HAL_TIM_PWM_Start+0x6a>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d109      	bne.n	8003efc <HAL_TIM_PWM_Start+0x58>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	bf14      	ite	ne
 8003ef4:	2301      	movne	r3, #1
 8003ef6:	2300      	moveq	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	e008      	b.n	8003f0e <HAL_TIM_PWM_Start+0x6a>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	bf14      	ite	ne
 8003f08:	2301      	movne	r3, #1
 8003f0a:	2300      	moveq	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e068      	b.n	8003fe8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d104      	bne.n	8003f26 <HAL_TIM_PWM_Start+0x82>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f24:	e013      	b.n	8003f4e <HAL_TIM_PWM_Start+0xaa>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b04      	cmp	r3, #4
 8003f2a:	d104      	bne.n	8003f36 <HAL_TIM_PWM_Start+0x92>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f34:	e00b      	b.n	8003f4e <HAL_TIM_PWM_Start+0xaa>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d104      	bne.n	8003f46 <HAL_TIM_PWM_Start+0xa2>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f44:	e003      	b.n	8003f4e <HAL_TIM_PWM_Start+0xaa>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2202      	movs	r2, #2
 8003f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2201      	movs	r2, #1
 8003f54:	6839      	ldr	r1, [r7, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 fc84 	bl	8004864 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a23      	ldr	r2, [pc, #140]	; (8003ff0 <HAL_TIM_PWM_Start+0x14c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d107      	bne.n	8003f76 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a1d      	ldr	r2, [pc, #116]	; (8003ff0 <HAL_TIM_PWM_Start+0x14c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d018      	beq.n	8003fb2 <HAL_TIM_PWM_Start+0x10e>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f88:	d013      	beq.n	8003fb2 <HAL_TIM_PWM_Start+0x10e>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a19      	ldr	r2, [pc, #100]	; (8003ff4 <HAL_TIM_PWM_Start+0x150>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d00e      	beq.n	8003fb2 <HAL_TIM_PWM_Start+0x10e>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a17      	ldr	r2, [pc, #92]	; (8003ff8 <HAL_TIM_PWM_Start+0x154>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d009      	beq.n	8003fb2 <HAL_TIM_PWM_Start+0x10e>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a16      	ldr	r2, [pc, #88]	; (8003ffc <HAL_TIM_PWM_Start+0x158>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d004      	beq.n	8003fb2 <HAL_TIM_PWM_Start+0x10e>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a14      	ldr	r2, [pc, #80]	; (8004000 <HAL_TIM_PWM_Start+0x15c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d111      	bne.n	8003fd6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2b06      	cmp	r3, #6
 8003fc2:	d010      	beq.n	8003fe6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0201 	orr.w	r2, r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd4:	e007      	b.n	8003fe6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f042 0201 	orr.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40010000 	.word	0x40010000
 8003ff4:	40000400 	.word	0x40000400
 8003ff8:	40000800 	.word	0x40000800
 8003ffc:	40000c00 	.word	0x40000c00
 8004000:	40014000 	.word	0x40014000

08004004 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800401e:	2302      	movs	r3, #2
 8004020:	e0ae      	b.n	8004180 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b0c      	cmp	r3, #12
 800402e:	f200 809f 	bhi.w	8004170 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004032:	a201      	add	r2, pc, #4	; (adr r2, 8004038 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004038:	0800406d 	.word	0x0800406d
 800403c:	08004171 	.word	0x08004171
 8004040:	08004171 	.word	0x08004171
 8004044:	08004171 	.word	0x08004171
 8004048:	080040ad 	.word	0x080040ad
 800404c:	08004171 	.word	0x08004171
 8004050:	08004171 	.word	0x08004171
 8004054:	08004171 	.word	0x08004171
 8004058:	080040ef 	.word	0x080040ef
 800405c:	08004171 	.word	0x08004171
 8004060:	08004171 	.word	0x08004171
 8004064:	08004171 	.word	0x08004171
 8004068:	0800412f 	.word	0x0800412f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68b9      	ldr	r1, [r7, #8]
 8004072:	4618      	mov	r0, r3
 8004074:	f000 f9d0 	bl	8004418 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699a      	ldr	r2, [r3, #24]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0208 	orr.w	r2, r2, #8
 8004086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699a      	ldr	r2, [r3, #24]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0204 	bic.w	r2, r2, #4
 8004096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6999      	ldr	r1, [r3, #24]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	691a      	ldr	r2, [r3, #16]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	619a      	str	r2, [r3, #24]
      break;
 80040aa:	e064      	b.n	8004176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68b9      	ldr	r1, [r7, #8]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 fa16 	bl	80044e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699a      	ldr	r2, [r3, #24]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699a      	ldr	r2, [r3, #24]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6999      	ldr	r1, [r3, #24]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	021a      	lsls	r2, r3, #8
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	619a      	str	r2, [r3, #24]
      break;
 80040ec:	e043      	b.n	8004176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68b9      	ldr	r1, [r7, #8]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 fa61 	bl	80045bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	69da      	ldr	r2, [r3, #28]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f042 0208 	orr.w	r2, r2, #8
 8004108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69da      	ldr	r2, [r3, #28]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0204 	bic.w	r2, r2, #4
 8004118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	69d9      	ldr	r1, [r3, #28]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	61da      	str	r2, [r3, #28]
      break;
 800412c:	e023      	b.n	8004176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68b9      	ldr	r1, [r7, #8]
 8004134:	4618      	mov	r0, r3
 8004136:	f000 faab 	bl	8004690 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	69da      	ldr	r2, [r3, #28]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69da      	ldr	r2, [r3, #28]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	69d9      	ldr	r1, [r3, #28]
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	021a      	lsls	r2, r3, #8
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	61da      	str	r2, [r3, #28]
      break;
 800416e:	e002      	b.n	8004176 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	75fb      	strb	r3, [r7, #23]
      break;
 8004174:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800417e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800419c:	2b01      	cmp	r3, #1
 800419e:	d101      	bne.n	80041a4 <HAL_TIM_ConfigClockSource+0x1c>
 80041a0:	2302      	movs	r3, #2
 80041a2:	e0b4      	b.n	800430e <HAL_TIM_ConfigClockSource+0x186>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041dc:	d03e      	beq.n	800425c <HAL_TIM_ConfigClockSource+0xd4>
 80041de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041e2:	f200 8087 	bhi.w	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 80041e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ea:	f000 8086 	beq.w	80042fa <HAL_TIM_ConfigClockSource+0x172>
 80041ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f2:	d87f      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 80041f4:	2b70      	cmp	r3, #112	; 0x70
 80041f6:	d01a      	beq.n	800422e <HAL_TIM_ConfigClockSource+0xa6>
 80041f8:	2b70      	cmp	r3, #112	; 0x70
 80041fa:	d87b      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 80041fc:	2b60      	cmp	r3, #96	; 0x60
 80041fe:	d050      	beq.n	80042a2 <HAL_TIM_ConfigClockSource+0x11a>
 8004200:	2b60      	cmp	r3, #96	; 0x60
 8004202:	d877      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004204:	2b50      	cmp	r3, #80	; 0x50
 8004206:	d03c      	beq.n	8004282 <HAL_TIM_ConfigClockSource+0xfa>
 8004208:	2b50      	cmp	r3, #80	; 0x50
 800420a:	d873      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 800420c:	2b40      	cmp	r3, #64	; 0x40
 800420e:	d058      	beq.n	80042c2 <HAL_TIM_ConfigClockSource+0x13a>
 8004210:	2b40      	cmp	r3, #64	; 0x40
 8004212:	d86f      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004214:	2b30      	cmp	r3, #48	; 0x30
 8004216:	d064      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004218:	2b30      	cmp	r3, #48	; 0x30
 800421a:	d86b      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 800421c:	2b20      	cmp	r3, #32
 800421e:	d060      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004220:	2b20      	cmp	r3, #32
 8004222:	d867      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004224:	2b00      	cmp	r3, #0
 8004226:	d05c      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004228:	2b10      	cmp	r3, #16
 800422a:	d05a      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x15a>
 800422c:	e062      	b.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6818      	ldr	r0, [r3, #0]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	6899      	ldr	r1, [r3, #8]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f000 faf1 	bl	8004824 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004250:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	609a      	str	r2, [r3, #8]
      break;
 800425a:	e04f      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6818      	ldr	r0, [r3, #0]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	6899      	ldr	r1, [r3, #8]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f000 fada 	bl	8004824 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800427e:	609a      	str	r2, [r3, #8]
      break;
 8004280:	e03c      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6818      	ldr	r0, [r3, #0]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	6859      	ldr	r1, [r3, #4]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	461a      	mov	r2, r3
 8004290:	f000 fa4e 	bl	8004730 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2150      	movs	r1, #80	; 0x50
 800429a:	4618      	mov	r0, r3
 800429c:	f000 faa7 	bl	80047ee <TIM_ITRx_SetConfig>
      break;
 80042a0:	e02c      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6818      	ldr	r0, [r3, #0]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	6859      	ldr	r1, [r3, #4]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	461a      	mov	r2, r3
 80042b0:	f000 fa6d 	bl	800478e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2160      	movs	r1, #96	; 0x60
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fa97 	bl	80047ee <TIM_ITRx_SetConfig>
      break;
 80042c0:	e01c      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	6859      	ldr	r1, [r3, #4]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	461a      	mov	r2, r3
 80042d0:	f000 fa2e 	bl	8004730 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2140      	movs	r1, #64	; 0x40
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 fa87 	bl	80047ee <TIM_ITRx_SetConfig>
      break;
 80042e0:	e00c      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4619      	mov	r1, r3
 80042ec:	4610      	mov	r0, r2
 80042ee:	f000 fa7e 	bl	80047ee <TIM_ITRx_SetConfig>
      break;
 80042f2:	e003      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	73fb      	strb	r3, [r7, #15]
      break;
 80042f8:	e000      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800430c:	7bfb      	ldrb	r3, [r7, #15]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a34      	ldr	r2, [pc, #208]	; (80043fc <TIM_Base_SetConfig+0xe4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d00f      	beq.n	8004350 <TIM_Base_SetConfig+0x38>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004336:	d00b      	beq.n	8004350 <TIM_Base_SetConfig+0x38>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a31      	ldr	r2, [pc, #196]	; (8004400 <TIM_Base_SetConfig+0xe8>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d007      	beq.n	8004350 <TIM_Base_SetConfig+0x38>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a30      	ldr	r2, [pc, #192]	; (8004404 <TIM_Base_SetConfig+0xec>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d003      	beq.n	8004350 <TIM_Base_SetConfig+0x38>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a2f      	ldr	r2, [pc, #188]	; (8004408 <TIM_Base_SetConfig+0xf0>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d108      	bne.n	8004362 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	4313      	orrs	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a25      	ldr	r2, [pc, #148]	; (80043fc <TIM_Base_SetConfig+0xe4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d01b      	beq.n	80043a2 <TIM_Base_SetConfig+0x8a>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004370:	d017      	beq.n	80043a2 <TIM_Base_SetConfig+0x8a>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a22      	ldr	r2, [pc, #136]	; (8004400 <TIM_Base_SetConfig+0xe8>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d013      	beq.n	80043a2 <TIM_Base_SetConfig+0x8a>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a21      	ldr	r2, [pc, #132]	; (8004404 <TIM_Base_SetConfig+0xec>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d00f      	beq.n	80043a2 <TIM_Base_SetConfig+0x8a>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a20      	ldr	r2, [pc, #128]	; (8004408 <TIM_Base_SetConfig+0xf0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00b      	beq.n	80043a2 <TIM_Base_SetConfig+0x8a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a1f      	ldr	r2, [pc, #124]	; (800440c <TIM_Base_SetConfig+0xf4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d007      	beq.n	80043a2 <TIM_Base_SetConfig+0x8a>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a1e      	ldr	r2, [pc, #120]	; (8004410 <TIM_Base_SetConfig+0xf8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d003      	beq.n	80043a2 <TIM_Base_SetConfig+0x8a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a1d      	ldr	r2, [pc, #116]	; (8004414 <TIM_Base_SetConfig+0xfc>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d108      	bne.n	80043b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a08      	ldr	r2, [pc, #32]	; (80043fc <TIM_Base_SetConfig+0xe4>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d103      	bne.n	80043e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	691a      	ldr	r2, [r3, #16]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	615a      	str	r2, [r3, #20]
}
 80043ee:	bf00      	nop
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40010000 	.word	0x40010000
 8004400:	40000400 	.word	0x40000400
 8004404:	40000800 	.word	0x40000800
 8004408:	40000c00 	.word	0x40000c00
 800440c:	40014000 	.word	0x40014000
 8004410:	40014400 	.word	0x40014400
 8004414:	40014800 	.word	0x40014800

08004418 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0201 	bic.w	r2, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0303 	bic.w	r3, r3, #3
 800444e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f023 0302 	bic.w	r3, r3, #2
 8004460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a1c      	ldr	r2, [pc, #112]	; (80044e0 <TIM_OC1_SetConfig+0xc8>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d10c      	bne.n	800448e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f023 0308 	bic.w	r3, r3, #8
 800447a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	4313      	orrs	r3, r2
 8004484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f023 0304 	bic.w	r3, r3, #4
 800448c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a13      	ldr	r2, [pc, #76]	; (80044e0 <TIM_OC1_SetConfig+0xc8>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d111      	bne.n	80044ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800449c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	621a      	str	r2, [r3, #32]
}
 80044d4:	bf00      	nop
 80044d6:	371c      	adds	r7, #28
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	40010000 	.word	0x40010000

080044e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b087      	sub	sp, #28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	f023 0210 	bic.w	r2, r3, #16
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800451a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	021b      	lsls	r3, r3, #8
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	4313      	orrs	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f023 0320 	bic.w	r3, r3, #32
 800452e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a1e      	ldr	r2, [pc, #120]	; (80045b8 <TIM_OC2_SetConfig+0xd4>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d10d      	bne.n	8004560 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800454a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	4313      	orrs	r3, r2
 8004556:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800455e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a15      	ldr	r2, [pc, #84]	; (80045b8 <TIM_OC2_SetConfig+0xd4>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d113      	bne.n	8004590 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800456e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004576:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	4313      	orrs	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	621a      	str	r2, [r3, #32]
}
 80045aa:	bf00      	nop
 80045ac:	371c      	adds	r7, #28
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	40010000 	.word	0x40010000

080045bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 0303 	bic.w	r3, r3, #3
 80045f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	021b      	lsls	r3, r3, #8
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	4313      	orrs	r3, r2
 8004610:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a1d      	ldr	r2, [pc, #116]	; (800468c <TIM_OC3_SetConfig+0xd0>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d10d      	bne.n	8004636 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004620:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	021b      	lsls	r3, r3, #8
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004634:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a14      	ldr	r2, [pc, #80]	; (800468c <TIM_OC3_SetConfig+0xd0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d113      	bne.n	8004666 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800464c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	4313      	orrs	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	011b      	lsls	r3, r3, #4
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	4313      	orrs	r3, r2
 8004664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	621a      	str	r2, [r3, #32]
}
 8004680:	bf00      	nop
 8004682:	371c      	adds	r7, #28
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	40010000 	.word	0x40010000

08004690 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	021b      	lsls	r3, r3, #8
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	031b      	lsls	r3, r3, #12
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a10      	ldr	r2, [pc, #64]	; (800472c <TIM_OC4_SetConfig+0x9c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d109      	bne.n	8004704 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	019b      	lsls	r3, r3, #6
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	4313      	orrs	r3, r2
 8004702:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	621a      	str	r2, [r3, #32]
}
 800471e:	bf00      	nop
 8004720:	371c      	adds	r7, #28
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40010000 	.word	0x40010000

08004730 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004730:	b480      	push	{r7}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	f023 0201 	bic.w	r2, r3, #1
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800475a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	4313      	orrs	r3, r2
 8004764:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f023 030a 	bic.w	r3, r3, #10
 800476c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	4313      	orrs	r3, r2
 8004774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	621a      	str	r2, [r3, #32]
}
 8004782:	bf00      	nop
 8004784:	371c      	adds	r7, #28
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800478e:	b480      	push	{r7}
 8004790:	b087      	sub	sp, #28
 8004792:	af00      	add	r7, sp, #0
 8004794:	60f8      	str	r0, [r7, #12]
 8004796:	60b9      	str	r1, [r7, #8]
 8004798:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	f023 0210 	bic.w	r2, r3, #16
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	031b      	lsls	r3, r3, #12
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	011b      	lsls	r3, r3, #4
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	621a      	str	r2, [r3, #32]
}
 80047e2:	bf00      	nop
 80047e4:	371c      	adds	r7, #28
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b085      	sub	sp, #20
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004804:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4313      	orrs	r3, r2
 800480c:	f043 0307 	orr.w	r3, r3, #7
 8004810:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	609a      	str	r2, [r3, #8]
}
 8004818:	bf00      	nop
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
 8004830:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800483e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	021a      	lsls	r2, r3, #8
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	431a      	orrs	r2, r3
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4313      	orrs	r3, r2
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	4313      	orrs	r3, r2
 8004850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	609a      	str	r2, [r3, #8]
}
 8004858:	bf00      	nop
 800485a:	371c      	adds	r7, #28
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f003 031f 	and.w	r3, r3, #31
 8004876:	2201      	movs	r2, #1
 8004878:	fa02 f303 	lsl.w	r3, r2, r3
 800487c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6a1a      	ldr	r2, [r3, #32]
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	43db      	mvns	r3, r3
 8004886:	401a      	ands	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6a1a      	ldr	r2, [r3, #32]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f003 031f 	and.w	r3, r3, #31
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	fa01 f303 	lsl.w	r3, r1, r3
 800489c:	431a      	orrs	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	621a      	str	r2, [r3, #32]
}
 80048a2:	bf00      	nop
 80048a4:	371c      	adds	r7, #28
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
	...

080048b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d101      	bne.n	80048c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048c4:	2302      	movs	r3, #2
 80048c6:	e050      	b.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a1c      	ldr	r2, [pc, #112]	; (8004978 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d018      	beq.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004914:	d013      	beq.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a18      	ldr	r2, [pc, #96]	; (800497c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d00e      	beq.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a16      	ldr	r2, [pc, #88]	; (8004980 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d009      	beq.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a15      	ldr	r2, [pc, #84]	; (8004984 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d004      	beq.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a13      	ldr	r2, [pc, #76]	; (8004988 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d10c      	bne.n	8004958 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004944:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	4313      	orrs	r3, r2
 800494e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	40010000 	.word	0x40010000
 800497c:	40000400 	.word	0x40000400
 8004980:	40000800 	.word	0x40000800
 8004984:	40000c00 	.word	0x40000c00
 8004988:	40014000 	.word	0x40014000

0800498c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e03f      	b.n	8004a1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d106      	bne.n	80049b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7fd f826 	bl	8001a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2224      	movs	r2, #36	; 0x24
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68da      	ldr	r2, [r3, #12]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fe19 	bl	8005608 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	695a      	ldr	r2, [r3, #20]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b08a      	sub	sp, #40	; 0x28
 8004a2a:	af02      	add	r7, sp, #8
 8004a2c:	60f8      	str	r0, [r7, #12]
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	603b      	str	r3, [r7, #0]
 8004a32:	4613      	mov	r3, r2
 8004a34:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b20      	cmp	r3, #32
 8004a44:	d17c      	bne.n	8004b40 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d002      	beq.n	8004a52 <HAL_UART_Transmit+0x2c>
 8004a4c:	88fb      	ldrh	r3, [r7, #6]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e075      	b.n	8004b42 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d101      	bne.n	8004a64 <HAL_UART_Transmit+0x3e>
 8004a60:	2302      	movs	r3, #2
 8004a62:	e06e      	b.n	8004b42 <HAL_UART_Transmit+0x11c>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2221      	movs	r2, #33	; 0x21
 8004a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a7a:	f7fd fa45 	bl	8001f08 <HAL_GetTick>
 8004a7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	88fa      	ldrh	r2, [r7, #6]
 8004a84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	88fa      	ldrh	r2, [r7, #6]
 8004a8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a94:	d108      	bne.n	8004aa8 <HAL_UART_Transmit+0x82>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d104      	bne.n	8004aa8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	61bb      	str	r3, [r7, #24]
 8004aa6:	e003      	b.n	8004ab0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004aac:	2300      	movs	r3, #0
 8004aae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004ab8:	e02a      	b.n	8004b10 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	2180      	movs	r1, #128	; 0x80
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 fb59 	bl	800517c <UART_WaitOnFlagUntilTimeout>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e036      	b.n	8004b42 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10b      	bne.n	8004af2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	881b      	ldrh	r3, [r3, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ae8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	3302      	adds	r3, #2
 8004aee:	61bb      	str	r3, [r7, #24]
 8004af0:	e007      	b.n	8004b02 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	781a      	ldrb	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	3301      	adds	r3, #1
 8004b00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1cf      	bne.n	8004aba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2200      	movs	r2, #0
 8004b22:	2140      	movs	r1, #64	; 0x40
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 fb29 	bl	800517c <UART_WaitOnFlagUntilTimeout>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e006      	b.n	8004b42 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	e000      	b.n	8004b42 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b40:	2302      	movs	r3, #2
  }
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3720      	adds	r7, #32
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b085      	sub	sp, #20
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	60f8      	str	r0, [r7, #12]
 8004b52:	60b9      	str	r1, [r7, #8]
 8004b54:	4613      	mov	r3, r2
 8004b56:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b20      	cmp	r3, #32
 8004b62:	d130      	bne.n	8004bc6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d002      	beq.n	8004b70 <HAL_UART_Transmit_IT+0x26>
 8004b6a:	88fb      	ldrh	r3, [r7, #6]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e029      	b.n	8004bc8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d101      	bne.n	8004b82 <HAL_UART_Transmit_IT+0x38>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e022      	b.n	8004bc8 <HAL_UART_Transmit_IT+0x7e>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	88fa      	ldrh	r2, [r7, #6]
 8004b94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	88fa      	ldrh	r2, [r7, #6]
 8004b9a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2221      	movs	r2, #33	; 0x21
 8004ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68da      	ldr	r2, [r3, #12]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004bc0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	e000      	b.n	8004bc8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004bc6:	2302      	movs	r3, #2
  }
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	4613      	mov	r3, r2
 8004be0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b20      	cmp	r3, #32
 8004bec:	d11d      	bne.n	8004c2a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <HAL_UART_Receive_IT+0x26>
 8004bf4:	88fb      	ldrh	r3, [r7, #6]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e016      	b.n	8004c2c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d101      	bne.n	8004c0c <HAL_UART_Receive_IT+0x38>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	e00f      	b.n	8004c2c <HAL_UART_Receive_IT+0x58>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c1a:	88fb      	ldrh	r3, [r7, #6]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	68b9      	ldr	r1, [r7, #8]
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 fb19 	bl	8005258 <UART_Start_Receive_IT>
 8004c26:	4603      	mov	r3, r0
 8004c28:	e000      	b.n	8004c2c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004c2a:	2302      	movs	r3, #2
  }
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b0ba      	sub	sp, #232	; 0xe8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c6a:	f003 030f 	and.w	r3, r3, #15
 8004c6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004c72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10f      	bne.n	8004c9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c7e:	f003 0320 	and.w	r3, r3, #32
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d009      	beq.n	8004c9a <HAL_UART_IRQHandler+0x66>
 8004c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c8a:	f003 0320 	and.w	r3, r3, #32
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fbfd 	bl	8005492 <UART_Receive_IT>
      return;
 8004c98:	e256      	b.n	8005148 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f000 80de 	beq.w	8004e60 <HAL_UART_IRQHandler+0x22c>
 8004ca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d106      	bne.n	8004cbe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cb4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 80d1 	beq.w	8004e60 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00b      	beq.n	8004ce2 <HAL_UART_IRQHandler+0xae>
 8004cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d005      	beq.n	8004ce2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	f043 0201 	orr.w	r2, r3, #1
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ce6:	f003 0304 	and.w	r3, r3, #4
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00b      	beq.n	8004d06 <HAL_UART_IRQHandler+0xd2>
 8004cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d005      	beq.n	8004d06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	f043 0202 	orr.w	r2, r3, #2
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00b      	beq.n	8004d2a <HAL_UART_IRQHandler+0xf6>
 8004d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d005      	beq.n	8004d2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	f043 0204 	orr.w	r2, r3, #4
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d2e:	f003 0308 	and.w	r3, r3, #8
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d011      	beq.n	8004d5a <HAL_UART_IRQHandler+0x126>
 8004d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d3a:	f003 0320 	and.w	r3, r3, #32
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d105      	bne.n	8004d4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d005      	beq.n	8004d5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	f043 0208 	orr.w	r2, r3, #8
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f000 81ed 	beq.w	800513e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d68:	f003 0320 	and.w	r3, r3, #32
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d008      	beq.n	8004d82 <HAL_UART_IRQHandler+0x14e>
 8004d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d74:	f003 0320 	and.w	r3, r3, #32
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 fb88 	bl	8005492 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8c:	2b40      	cmp	r3, #64	; 0x40
 8004d8e:	bf0c      	ite	eq
 8004d90:	2301      	moveq	r3, #1
 8004d92:	2300      	movne	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d103      	bne.n	8004dae <HAL_UART_IRQHandler+0x17a>
 8004da6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d04f      	beq.n	8004e4e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fa90 	bl	80052d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dbe:	2b40      	cmp	r3, #64	; 0x40
 8004dc0:	d141      	bne.n	8004e46 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	3314      	adds	r3, #20
 8004dc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004dd0:	e853 3f00 	ldrex	r3, [r3]
 8004dd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004dd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004de0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3314      	adds	r3, #20
 8004dea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004dee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004df2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004dfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004dfe:	e841 2300 	strex	r3, r2, [r1]
 8004e02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1d9      	bne.n	8004dc2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d013      	beq.n	8004e3e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1a:	4a7d      	ldr	r2, [pc, #500]	; (8005010 <HAL_UART_IRQHandler+0x3dc>)
 8004e1c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fd fe8e 	bl	8002b44 <HAL_DMA_Abort_IT>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d016      	beq.n	8004e5c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e38:	4610      	mov	r0, r2
 8004e3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e3c:	e00e      	b.n	8004e5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f986 	bl	8005150 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e44:	e00a      	b.n	8004e5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f982 	bl	8005150 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e4c:	e006      	b.n	8004e5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f97e 	bl	8005150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004e5a:	e170      	b.n	800513e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e5c:	bf00      	nop
    return;
 8004e5e:	e16e      	b.n	800513e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	f040 814a 	bne.w	80050fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e6e:	f003 0310 	and.w	r3, r3, #16
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 8143 	beq.w	80050fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e7c:	f003 0310 	and.w	r3, r3, #16
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 813c 	beq.w	80050fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e86:	2300      	movs	r3, #0
 8004e88:	60bb      	str	r3, [r7, #8]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	60bb      	str	r3, [r7, #8]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	60bb      	str	r3, [r7, #8]
 8004e9a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea6:	2b40      	cmp	r3, #64	; 0x40
 8004ea8:	f040 80b4 	bne.w	8005014 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004eb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 8140 	beq.w	8005142 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ec6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	f080 8139 	bcs.w	8005142 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ed6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ee2:	f000 8088 	beq.w	8004ff6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	330c      	adds	r3, #12
 8004eec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ef4:	e853 3f00 	ldrex	r3, [r3]
 8004ef8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004efc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	330c      	adds	r3, #12
 8004f0e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004f12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f22:	e841 2300 	strex	r3, r2, [r1]
 8004f26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1d9      	bne.n	8004ee6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3314      	adds	r3, #20
 8004f38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f3c:	e853 3f00 	ldrex	r3, [r3]
 8004f40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f44:	f023 0301 	bic.w	r3, r3, #1
 8004f48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3314      	adds	r3, #20
 8004f52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f56:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f5a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e1      	bne.n	8004f32 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3314      	adds	r3, #20
 8004f74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f78:	e853 3f00 	ldrex	r3, [r3]
 8004f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3314      	adds	r3, #20
 8004f8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f9a:	e841 2300 	strex	r3, r2, [r1]
 8004f9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004fa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1e3      	bne.n	8004f6e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	330c      	adds	r3, #12
 8004fba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fbe:	e853 3f00 	ldrex	r3, [r3]
 8004fc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fc6:	f023 0310 	bic.w	r3, r3, #16
 8004fca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	330c      	adds	r3, #12
 8004fd4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004fd8:	65ba      	str	r2, [r7, #88]	; 0x58
 8004fda:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004fde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fe0:	e841 2300 	strex	r3, r2, [r1]
 8004fe4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1e3      	bne.n	8004fb4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fd fd37 	bl	8002a64 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	b29b      	uxth	r3, r3
 8005004:	4619      	mov	r1, r3
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f8ac 	bl	8005164 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800500c:	e099      	b.n	8005142 <HAL_UART_IRQHandler+0x50e>
 800500e:	bf00      	nop
 8005010:	0800539b 	.word	0x0800539b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800501c:	b29b      	uxth	r3, r3
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005028:	b29b      	uxth	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	f000 808b 	beq.w	8005146 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005030:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 8086 	beq.w	8005146 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	330c      	adds	r3, #12
 8005040:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005044:	e853 3f00 	ldrex	r3, [r3]
 8005048:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800504a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005050:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	330c      	adds	r3, #12
 800505a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800505e:	647a      	str	r2, [r7, #68]	; 0x44
 8005060:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005062:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005064:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005066:	e841 2300 	strex	r3, r2, [r1]
 800506a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800506c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1e3      	bne.n	800503a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	3314      	adds	r3, #20
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	e853 3f00 	ldrex	r3, [r3]
 8005080:	623b      	str	r3, [r7, #32]
   return(result);
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	f023 0301 	bic.w	r3, r3, #1
 8005088:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3314      	adds	r3, #20
 8005092:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005096:	633a      	str	r2, [r7, #48]	; 0x30
 8005098:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800509c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800509e:	e841 2300 	strex	r3, r2, [r1]
 80050a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1e3      	bne.n	8005072 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	330c      	adds	r3, #12
 80050be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	e853 3f00 	ldrex	r3, [r3]
 80050c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 0310 	bic.w	r3, r3, #16
 80050ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	330c      	adds	r3, #12
 80050d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80050dc:	61fa      	str	r2, [r7, #28]
 80050de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e0:	69b9      	ldr	r1, [r7, #24]
 80050e2:	69fa      	ldr	r2, [r7, #28]
 80050e4:	e841 2300 	strex	r3, r2, [r1]
 80050e8:	617b      	str	r3, [r7, #20]
   return(result);
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1e3      	bne.n	80050b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050f4:	4619      	mov	r1, r3
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f834 	bl	8005164 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050fc:	e023      	b.n	8005146 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005106:	2b00      	cmp	r3, #0
 8005108:	d009      	beq.n	800511e <HAL_UART_IRQHandler+0x4ea>
 800510a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800510e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f953 	bl	80053c2 <UART_Transmit_IT>
    return;
 800511c:	e014      	b.n	8005148 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800511e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00e      	beq.n	8005148 <HAL_UART_IRQHandler+0x514>
 800512a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800512e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005132:	2b00      	cmp	r3, #0
 8005134:	d008      	beq.n	8005148 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f993 	bl	8005462 <UART_EndTransmit_IT>
    return;
 800513c:	e004      	b.n	8005148 <HAL_UART_IRQHandler+0x514>
    return;
 800513e:	bf00      	nop
 8005140:	e002      	b.n	8005148 <HAL_UART_IRQHandler+0x514>
      return;
 8005142:	bf00      	nop
 8005144:	e000      	b.n	8005148 <HAL_UART_IRQHandler+0x514>
      return;
 8005146:	bf00      	nop
  }
}
 8005148:	37e8      	adds	r7, #232	; 0xe8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop

08005150 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	460b      	mov	r3, r1
 800516e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b090      	sub	sp, #64	; 0x40
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	603b      	str	r3, [r7, #0]
 8005188:	4613      	mov	r3, r2
 800518a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800518c:	e050      	b.n	8005230 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800518e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005194:	d04c      	beq.n	8005230 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005198:	2b00      	cmp	r3, #0
 800519a:	d007      	beq.n	80051ac <UART_WaitOnFlagUntilTimeout+0x30>
 800519c:	f7fc feb4 	bl	8001f08 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d241      	bcs.n	8005230 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	330c      	adds	r3, #12
 80051b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b6:	e853 3f00 	ldrex	r3, [r3]
 80051ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	330c      	adds	r3, #12
 80051ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051cc:	637a      	str	r2, [r7, #52]	; 0x34
 80051ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051d4:	e841 2300 	strex	r3, r2, [r1]
 80051d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1e5      	bne.n	80051ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3314      	adds	r3, #20
 80051e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	e853 3f00 	ldrex	r3, [r3]
 80051ee:	613b      	str	r3, [r7, #16]
   return(result);
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	f023 0301 	bic.w	r3, r3, #1
 80051f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3314      	adds	r3, #20
 80051fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005200:	623a      	str	r2, [r7, #32]
 8005202:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005204:	69f9      	ldr	r1, [r7, #28]
 8005206:	6a3a      	ldr	r2, [r7, #32]
 8005208:	e841 2300 	strex	r3, r2, [r1]
 800520c:	61bb      	str	r3, [r7, #24]
   return(result);
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1e5      	bne.n	80051e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2220      	movs	r2, #32
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2220      	movs	r2, #32
 8005220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e00f      	b.n	8005250 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	4013      	ands	r3, r2
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	429a      	cmp	r2, r3
 800523e:	bf0c      	ite	eq
 8005240:	2301      	moveq	r3, #1
 8005242:	2300      	movne	r3, #0
 8005244:	b2db      	uxtb	r3, r3
 8005246:	461a      	mov	r2, r3
 8005248:	79fb      	ldrb	r3, [r7, #7]
 800524a:	429a      	cmp	r2, r3
 800524c:	d09f      	beq.n	800518e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3740      	adds	r7, #64	; 0x40
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	4613      	mov	r3, r2
 8005264:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	88fa      	ldrh	r2, [r7, #6]
 8005270:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	88fa      	ldrh	r2, [r7, #6]
 8005276:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2222      	movs	r2, #34	; 0x22
 8005282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d007      	beq.n	80052a6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68da      	ldr	r2, [r3, #12]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052a4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	695a      	ldr	r2, [r3, #20]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f042 0201 	orr.w	r2, r2, #1
 80052b4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68da      	ldr	r2, [r3, #12]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f042 0220 	orr.w	r2, r2, #32
 80052c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b095      	sub	sp, #84	; 0x54
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	330c      	adds	r3, #12
 80052e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e6:	e853 3f00 	ldrex	r3, [r3]
 80052ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	330c      	adds	r3, #12
 80052fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052fc:	643a      	str	r2, [r7, #64]	; 0x40
 80052fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005302:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005304:	e841 2300 	strex	r3, r2, [r1]
 8005308:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800530a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e5      	bne.n	80052dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3314      	adds	r3, #20
 8005316:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	e853 3f00 	ldrex	r3, [r3]
 800531e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	f023 0301 	bic.w	r3, r3, #1
 8005326:	64bb      	str	r3, [r7, #72]	; 0x48
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3314      	adds	r3, #20
 800532e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005330:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005332:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005338:	e841 2300 	strex	r3, r2, [r1]
 800533c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1e5      	bne.n	8005310 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005348:	2b01      	cmp	r3, #1
 800534a:	d119      	bne.n	8005380 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	330c      	adds	r3, #12
 8005352:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	e853 3f00 	ldrex	r3, [r3]
 800535a:	60bb      	str	r3, [r7, #8]
   return(result);
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f023 0310 	bic.w	r3, r3, #16
 8005362:	647b      	str	r3, [r7, #68]	; 0x44
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	330c      	adds	r3, #12
 800536a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800536c:	61ba      	str	r2, [r7, #24]
 800536e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005370:	6979      	ldr	r1, [r7, #20]
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	e841 2300 	strex	r3, r2, [r1]
 8005378:	613b      	str	r3, [r7, #16]
   return(result);
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1e5      	bne.n	800534c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2220      	movs	r2, #32
 8005384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800538e:	bf00      	nop
 8005390:	3754      	adds	r7, #84	; 0x54
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b084      	sub	sp, #16
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f7ff fecb 	bl	8005150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053ba:	bf00      	nop
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b085      	sub	sp, #20
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b21      	cmp	r3, #33	; 0x21
 80053d4:	d13e      	bne.n	8005454 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053de:	d114      	bne.n	800540a <UART_Transmit_IT+0x48>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d110      	bne.n	800540a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	1c9a      	adds	r2, r3, #2
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	621a      	str	r2, [r3, #32]
 8005408:	e008      	b.n	800541c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	1c59      	adds	r1, r3, #1
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	6211      	str	r1, [r2, #32]
 8005414:	781a      	ldrb	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005420:	b29b      	uxth	r3, r3
 8005422:	3b01      	subs	r3, #1
 8005424:	b29b      	uxth	r3, r3
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	4619      	mov	r1, r3
 800542a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10f      	bne.n	8005450 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800543e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800544e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005450:	2300      	movs	r3, #0
 8005452:	e000      	b.n	8005456 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005454:	2302      	movs	r3, #2
  }
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b082      	sub	sp, #8
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005478:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2220      	movs	r2, #32
 800547e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7fb fd4e 	bl	8000f24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3708      	adds	r7, #8
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b08c      	sub	sp, #48	; 0x30
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b22      	cmp	r3, #34	; 0x22
 80054a4:	f040 80ab 	bne.w	80055fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054b0:	d117      	bne.n	80054e2 <UART_Receive_IT+0x50>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d113      	bne.n	80054e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80054ba:	2300      	movs	r3, #0
 80054bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054da:	1c9a      	adds	r2, r3, #2
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	629a      	str	r2, [r3, #40]	; 0x28
 80054e0:	e026      	b.n	8005530 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80054e8:	2300      	movs	r3, #0
 80054ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f4:	d007      	beq.n	8005506 <UART_Receive_IT+0x74>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10a      	bne.n	8005514 <UART_Receive_IT+0x82>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d106      	bne.n	8005514 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	b2da      	uxtb	r2, r3
 800550e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	e008      	b.n	8005526 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	b2db      	uxtb	r3, r3
 800551c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005520:	b2da      	uxtb	r2, r3
 8005522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005524:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005534:	b29b      	uxth	r3, r3
 8005536:	3b01      	subs	r3, #1
 8005538:	b29b      	uxth	r3, r3
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	4619      	mov	r1, r3
 800553e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005540:	2b00      	cmp	r3, #0
 8005542:	d15a      	bne.n	80055fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 0220 	bic.w	r2, r2, #32
 8005552:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005562:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695a      	ldr	r2, [r3, #20]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0201 	bic.w	r2, r2, #1
 8005572:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2220      	movs	r2, #32
 8005578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005580:	2b01      	cmp	r3, #1
 8005582:	d135      	bne.n	80055f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	330c      	adds	r3, #12
 8005590:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	e853 3f00 	ldrex	r3, [r3]
 8005598:	613b      	str	r3, [r7, #16]
   return(result);
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	f023 0310 	bic.w	r3, r3, #16
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	330c      	adds	r3, #12
 80055a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055aa:	623a      	str	r2, [r7, #32]
 80055ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ae:	69f9      	ldr	r1, [r7, #28]
 80055b0:	6a3a      	ldr	r2, [r7, #32]
 80055b2:	e841 2300 	strex	r3, r2, [r1]
 80055b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1e5      	bne.n	800558a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0310 	and.w	r3, r3, #16
 80055c8:	2b10      	cmp	r3, #16
 80055ca:	d10a      	bne.n	80055e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055cc:	2300      	movs	r3, #0
 80055ce:	60fb      	str	r3, [r7, #12]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055e6:	4619      	mov	r1, r3
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7ff fdbb 	bl	8005164 <HAL_UARTEx_RxEventCallback>
 80055ee:	e002      	b.n	80055f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7fb fc7d 	bl	8000ef0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80055f6:	2300      	movs	r3, #0
 80055f8:	e002      	b.n	8005600 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80055fa:	2300      	movs	r3, #0
 80055fc:	e000      	b.n	8005600 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80055fe:	2302      	movs	r3, #2
  }
}
 8005600:	4618      	mov	r0, r3
 8005602:	3730      	adds	r7, #48	; 0x30
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800560c:	b0c0      	sub	sp, #256	; 0x100
 800560e:	af00      	add	r7, sp, #0
 8005610:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005624:	68d9      	ldr	r1, [r3, #12]
 8005626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	ea40 0301 	orr.w	r3, r0, r1
 8005630:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	431a      	orrs	r2, r3
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	431a      	orrs	r2, r3
 8005648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	4313      	orrs	r3, r2
 8005650:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005660:	f021 010c 	bic.w	r1, r1, #12
 8005664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800566e:	430b      	orrs	r3, r1
 8005670:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800567e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005682:	6999      	ldr	r1, [r3, #24]
 8005684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	ea40 0301 	orr.w	r3, r0, r1
 800568e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	4b8f      	ldr	r3, [pc, #572]	; (80058d4 <UART_SetConfig+0x2cc>)
 8005698:	429a      	cmp	r2, r3
 800569a:	d005      	beq.n	80056a8 <UART_SetConfig+0xa0>
 800569c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	4b8d      	ldr	r3, [pc, #564]	; (80058d8 <UART_SetConfig+0x2d0>)
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d104      	bne.n	80056b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056a8:	f7fe fae4 	bl	8003c74 <HAL_RCC_GetPCLK2Freq>
 80056ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80056b0:	e003      	b.n	80056ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056b2:	f7fe facb 	bl	8003c4c <HAL_RCC_GetPCLK1Freq>
 80056b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056be:	69db      	ldr	r3, [r3, #28]
 80056c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056c4:	f040 810c 	bne.w	80058e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056cc:	2200      	movs	r2, #0
 80056ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80056d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80056d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80056da:	4622      	mov	r2, r4
 80056dc:	462b      	mov	r3, r5
 80056de:	1891      	adds	r1, r2, r2
 80056e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80056e2:	415b      	adcs	r3, r3
 80056e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056ea:	4621      	mov	r1, r4
 80056ec:	eb12 0801 	adds.w	r8, r2, r1
 80056f0:	4629      	mov	r1, r5
 80056f2:	eb43 0901 	adc.w	r9, r3, r1
 80056f6:	f04f 0200 	mov.w	r2, #0
 80056fa:	f04f 0300 	mov.w	r3, #0
 80056fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005702:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005706:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800570a:	4690      	mov	r8, r2
 800570c:	4699      	mov	r9, r3
 800570e:	4623      	mov	r3, r4
 8005710:	eb18 0303 	adds.w	r3, r8, r3
 8005714:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005718:	462b      	mov	r3, r5
 800571a:	eb49 0303 	adc.w	r3, r9, r3
 800571e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800572e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005732:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005736:	460b      	mov	r3, r1
 8005738:	18db      	adds	r3, r3, r3
 800573a:	653b      	str	r3, [r7, #80]	; 0x50
 800573c:	4613      	mov	r3, r2
 800573e:	eb42 0303 	adc.w	r3, r2, r3
 8005742:	657b      	str	r3, [r7, #84]	; 0x54
 8005744:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005748:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800574c:	f7fb f986 	bl	8000a5c <__aeabi_uldivmod>
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	4b61      	ldr	r3, [pc, #388]	; (80058dc <UART_SetConfig+0x2d4>)
 8005756:	fba3 2302 	umull	r2, r3, r3, r2
 800575a:	095b      	lsrs	r3, r3, #5
 800575c:	011c      	lsls	r4, r3, #4
 800575e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005762:	2200      	movs	r2, #0
 8005764:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005768:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800576c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005770:	4642      	mov	r2, r8
 8005772:	464b      	mov	r3, r9
 8005774:	1891      	adds	r1, r2, r2
 8005776:	64b9      	str	r1, [r7, #72]	; 0x48
 8005778:	415b      	adcs	r3, r3
 800577a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800577c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005780:	4641      	mov	r1, r8
 8005782:	eb12 0a01 	adds.w	sl, r2, r1
 8005786:	4649      	mov	r1, r9
 8005788:	eb43 0b01 	adc.w	fp, r3, r1
 800578c:	f04f 0200 	mov.w	r2, #0
 8005790:	f04f 0300 	mov.w	r3, #0
 8005794:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005798:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800579c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057a0:	4692      	mov	sl, r2
 80057a2:	469b      	mov	fp, r3
 80057a4:	4643      	mov	r3, r8
 80057a6:	eb1a 0303 	adds.w	r3, sl, r3
 80057aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057ae:	464b      	mov	r3, r9
 80057b0:	eb4b 0303 	adc.w	r3, fp, r3
 80057b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80057b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80057c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80057cc:	460b      	mov	r3, r1
 80057ce:	18db      	adds	r3, r3, r3
 80057d0:	643b      	str	r3, [r7, #64]	; 0x40
 80057d2:	4613      	mov	r3, r2
 80057d4:	eb42 0303 	adc.w	r3, r2, r3
 80057d8:	647b      	str	r3, [r7, #68]	; 0x44
 80057da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80057e2:	f7fb f93b 	bl	8000a5c <__aeabi_uldivmod>
 80057e6:	4602      	mov	r2, r0
 80057e8:	460b      	mov	r3, r1
 80057ea:	4611      	mov	r1, r2
 80057ec:	4b3b      	ldr	r3, [pc, #236]	; (80058dc <UART_SetConfig+0x2d4>)
 80057ee:	fba3 2301 	umull	r2, r3, r3, r1
 80057f2:	095b      	lsrs	r3, r3, #5
 80057f4:	2264      	movs	r2, #100	; 0x64
 80057f6:	fb02 f303 	mul.w	r3, r2, r3
 80057fa:	1acb      	subs	r3, r1, r3
 80057fc:	00db      	lsls	r3, r3, #3
 80057fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005802:	4b36      	ldr	r3, [pc, #216]	; (80058dc <UART_SetConfig+0x2d4>)
 8005804:	fba3 2302 	umull	r2, r3, r3, r2
 8005808:	095b      	lsrs	r3, r3, #5
 800580a:	005b      	lsls	r3, r3, #1
 800580c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005810:	441c      	add	r4, r3
 8005812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005816:	2200      	movs	r2, #0
 8005818:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800581c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005820:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005824:	4642      	mov	r2, r8
 8005826:	464b      	mov	r3, r9
 8005828:	1891      	adds	r1, r2, r2
 800582a:	63b9      	str	r1, [r7, #56]	; 0x38
 800582c:	415b      	adcs	r3, r3
 800582e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005830:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005834:	4641      	mov	r1, r8
 8005836:	1851      	adds	r1, r2, r1
 8005838:	6339      	str	r1, [r7, #48]	; 0x30
 800583a:	4649      	mov	r1, r9
 800583c:	414b      	adcs	r3, r1
 800583e:	637b      	str	r3, [r7, #52]	; 0x34
 8005840:	f04f 0200 	mov.w	r2, #0
 8005844:	f04f 0300 	mov.w	r3, #0
 8005848:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800584c:	4659      	mov	r1, fp
 800584e:	00cb      	lsls	r3, r1, #3
 8005850:	4651      	mov	r1, sl
 8005852:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005856:	4651      	mov	r1, sl
 8005858:	00ca      	lsls	r2, r1, #3
 800585a:	4610      	mov	r0, r2
 800585c:	4619      	mov	r1, r3
 800585e:	4603      	mov	r3, r0
 8005860:	4642      	mov	r2, r8
 8005862:	189b      	adds	r3, r3, r2
 8005864:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005868:	464b      	mov	r3, r9
 800586a:	460a      	mov	r2, r1
 800586c:	eb42 0303 	adc.w	r3, r2, r3
 8005870:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005880:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005884:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005888:	460b      	mov	r3, r1
 800588a:	18db      	adds	r3, r3, r3
 800588c:	62bb      	str	r3, [r7, #40]	; 0x28
 800588e:	4613      	mov	r3, r2
 8005890:	eb42 0303 	adc.w	r3, r2, r3
 8005894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005896:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800589a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800589e:	f7fb f8dd 	bl	8000a5c <__aeabi_uldivmod>
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	4b0d      	ldr	r3, [pc, #52]	; (80058dc <UART_SetConfig+0x2d4>)
 80058a8:	fba3 1302 	umull	r1, r3, r3, r2
 80058ac:	095b      	lsrs	r3, r3, #5
 80058ae:	2164      	movs	r1, #100	; 0x64
 80058b0:	fb01 f303 	mul.w	r3, r1, r3
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	3332      	adds	r3, #50	; 0x32
 80058ba:	4a08      	ldr	r2, [pc, #32]	; (80058dc <UART_SetConfig+0x2d4>)
 80058bc:	fba2 2303 	umull	r2, r3, r2, r3
 80058c0:	095b      	lsrs	r3, r3, #5
 80058c2:	f003 0207 	and.w	r2, r3, #7
 80058c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4422      	add	r2, r4
 80058ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058d0:	e105      	b.n	8005ade <UART_SetConfig+0x4d6>
 80058d2:	bf00      	nop
 80058d4:	40011000 	.word	0x40011000
 80058d8:	40011400 	.word	0x40011400
 80058dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058e4:	2200      	movs	r2, #0
 80058e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80058ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80058f2:	4642      	mov	r2, r8
 80058f4:	464b      	mov	r3, r9
 80058f6:	1891      	adds	r1, r2, r2
 80058f8:	6239      	str	r1, [r7, #32]
 80058fa:	415b      	adcs	r3, r3
 80058fc:	627b      	str	r3, [r7, #36]	; 0x24
 80058fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005902:	4641      	mov	r1, r8
 8005904:	1854      	adds	r4, r2, r1
 8005906:	4649      	mov	r1, r9
 8005908:	eb43 0501 	adc.w	r5, r3, r1
 800590c:	f04f 0200 	mov.w	r2, #0
 8005910:	f04f 0300 	mov.w	r3, #0
 8005914:	00eb      	lsls	r3, r5, #3
 8005916:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800591a:	00e2      	lsls	r2, r4, #3
 800591c:	4614      	mov	r4, r2
 800591e:	461d      	mov	r5, r3
 8005920:	4643      	mov	r3, r8
 8005922:	18e3      	adds	r3, r4, r3
 8005924:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005928:	464b      	mov	r3, r9
 800592a:	eb45 0303 	adc.w	r3, r5, r3
 800592e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800593e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005942:	f04f 0200 	mov.w	r2, #0
 8005946:	f04f 0300 	mov.w	r3, #0
 800594a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800594e:	4629      	mov	r1, r5
 8005950:	008b      	lsls	r3, r1, #2
 8005952:	4621      	mov	r1, r4
 8005954:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005958:	4621      	mov	r1, r4
 800595a:	008a      	lsls	r2, r1, #2
 800595c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005960:	f7fb f87c 	bl	8000a5c <__aeabi_uldivmod>
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	4b60      	ldr	r3, [pc, #384]	; (8005aec <UART_SetConfig+0x4e4>)
 800596a:	fba3 2302 	umull	r2, r3, r3, r2
 800596e:	095b      	lsrs	r3, r3, #5
 8005970:	011c      	lsls	r4, r3, #4
 8005972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005976:	2200      	movs	r2, #0
 8005978:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800597c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005980:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005984:	4642      	mov	r2, r8
 8005986:	464b      	mov	r3, r9
 8005988:	1891      	adds	r1, r2, r2
 800598a:	61b9      	str	r1, [r7, #24]
 800598c:	415b      	adcs	r3, r3
 800598e:	61fb      	str	r3, [r7, #28]
 8005990:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005994:	4641      	mov	r1, r8
 8005996:	1851      	adds	r1, r2, r1
 8005998:	6139      	str	r1, [r7, #16]
 800599a:	4649      	mov	r1, r9
 800599c:	414b      	adcs	r3, r1
 800599e:	617b      	str	r3, [r7, #20]
 80059a0:	f04f 0200 	mov.w	r2, #0
 80059a4:	f04f 0300 	mov.w	r3, #0
 80059a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059ac:	4659      	mov	r1, fp
 80059ae:	00cb      	lsls	r3, r1, #3
 80059b0:	4651      	mov	r1, sl
 80059b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059b6:	4651      	mov	r1, sl
 80059b8:	00ca      	lsls	r2, r1, #3
 80059ba:	4610      	mov	r0, r2
 80059bc:	4619      	mov	r1, r3
 80059be:	4603      	mov	r3, r0
 80059c0:	4642      	mov	r2, r8
 80059c2:	189b      	adds	r3, r3, r2
 80059c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059c8:	464b      	mov	r3, r9
 80059ca:	460a      	mov	r2, r1
 80059cc:	eb42 0303 	adc.w	r3, r2, r3
 80059d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80059de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80059e0:	f04f 0200 	mov.w	r2, #0
 80059e4:	f04f 0300 	mov.w	r3, #0
 80059e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80059ec:	4649      	mov	r1, r9
 80059ee:	008b      	lsls	r3, r1, #2
 80059f0:	4641      	mov	r1, r8
 80059f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059f6:	4641      	mov	r1, r8
 80059f8:	008a      	lsls	r2, r1, #2
 80059fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80059fe:	f7fb f82d 	bl	8000a5c <__aeabi_uldivmod>
 8005a02:	4602      	mov	r2, r0
 8005a04:	460b      	mov	r3, r1
 8005a06:	4b39      	ldr	r3, [pc, #228]	; (8005aec <UART_SetConfig+0x4e4>)
 8005a08:	fba3 1302 	umull	r1, r3, r3, r2
 8005a0c:	095b      	lsrs	r3, r3, #5
 8005a0e:	2164      	movs	r1, #100	; 0x64
 8005a10:	fb01 f303 	mul.w	r3, r1, r3
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	3332      	adds	r3, #50	; 0x32
 8005a1a:	4a34      	ldr	r2, [pc, #208]	; (8005aec <UART_SetConfig+0x4e4>)
 8005a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a20:	095b      	lsrs	r3, r3, #5
 8005a22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a26:	441c      	add	r4, r3
 8005a28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	673b      	str	r3, [r7, #112]	; 0x70
 8005a30:	677a      	str	r2, [r7, #116]	; 0x74
 8005a32:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a36:	4642      	mov	r2, r8
 8005a38:	464b      	mov	r3, r9
 8005a3a:	1891      	adds	r1, r2, r2
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	415b      	adcs	r3, r3
 8005a40:	60fb      	str	r3, [r7, #12]
 8005a42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a46:	4641      	mov	r1, r8
 8005a48:	1851      	adds	r1, r2, r1
 8005a4a:	6039      	str	r1, [r7, #0]
 8005a4c:	4649      	mov	r1, r9
 8005a4e:	414b      	adcs	r3, r1
 8005a50:	607b      	str	r3, [r7, #4]
 8005a52:	f04f 0200 	mov.w	r2, #0
 8005a56:	f04f 0300 	mov.w	r3, #0
 8005a5a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a5e:	4659      	mov	r1, fp
 8005a60:	00cb      	lsls	r3, r1, #3
 8005a62:	4651      	mov	r1, sl
 8005a64:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a68:	4651      	mov	r1, sl
 8005a6a:	00ca      	lsls	r2, r1, #3
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	4619      	mov	r1, r3
 8005a70:	4603      	mov	r3, r0
 8005a72:	4642      	mov	r2, r8
 8005a74:	189b      	adds	r3, r3, r2
 8005a76:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a78:	464b      	mov	r3, r9
 8005a7a:	460a      	mov	r2, r1
 8005a7c:	eb42 0303 	adc.w	r3, r2, r3
 8005a80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	663b      	str	r3, [r7, #96]	; 0x60
 8005a8c:	667a      	str	r2, [r7, #100]	; 0x64
 8005a8e:	f04f 0200 	mov.w	r2, #0
 8005a92:	f04f 0300 	mov.w	r3, #0
 8005a96:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a9a:	4649      	mov	r1, r9
 8005a9c:	008b      	lsls	r3, r1, #2
 8005a9e:	4641      	mov	r1, r8
 8005aa0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005aa4:	4641      	mov	r1, r8
 8005aa6:	008a      	lsls	r2, r1, #2
 8005aa8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005aac:	f7fa ffd6 	bl	8000a5c <__aeabi_uldivmod>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	4b0d      	ldr	r3, [pc, #52]	; (8005aec <UART_SetConfig+0x4e4>)
 8005ab6:	fba3 1302 	umull	r1, r3, r3, r2
 8005aba:	095b      	lsrs	r3, r3, #5
 8005abc:	2164      	movs	r1, #100	; 0x64
 8005abe:	fb01 f303 	mul.w	r3, r1, r3
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	011b      	lsls	r3, r3, #4
 8005ac6:	3332      	adds	r3, #50	; 0x32
 8005ac8:	4a08      	ldr	r2, [pc, #32]	; (8005aec <UART_SetConfig+0x4e4>)
 8005aca:	fba2 2303 	umull	r2, r3, r2, r3
 8005ace:	095b      	lsrs	r3, r3, #5
 8005ad0:	f003 020f 	and.w	r2, r3, #15
 8005ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4422      	add	r2, r4
 8005adc:	609a      	str	r2, [r3, #8]
}
 8005ade:	bf00      	nop
 8005ae0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aea:	bf00      	nop
 8005aec:	51eb851f 	.word	0x51eb851f

08005af0 <__errno>:
 8005af0:	4b01      	ldr	r3, [pc, #4]	; (8005af8 <__errno+0x8>)
 8005af2:	6818      	ldr	r0, [r3, #0]
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	2000000c 	.word	0x2000000c

08005afc <__libc_init_array>:
 8005afc:	b570      	push	{r4, r5, r6, lr}
 8005afe:	4d0d      	ldr	r5, [pc, #52]	; (8005b34 <__libc_init_array+0x38>)
 8005b00:	4c0d      	ldr	r4, [pc, #52]	; (8005b38 <__libc_init_array+0x3c>)
 8005b02:	1b64      	subs	r4, r4, r5
 8005b04:	10a4      	asrs	r4, r4, #2
 8005b06:	2600      	movs	r6, #0
 8005b08:	42a6      	cmp	r6, r4
 8005b0a:	d109      	bne.n	8005b20 <__libc_init_array+0x24>
 8005b0c:	4d0b      	ldr	r5, [pc, #44]	; (8005b3c <__libc_init_array+0x40>)
 8005b0e:	4c0c      	ldr	r4, [pc, #48]	; (8005b40 <__libc_init_array+0x44>)
 8005b10:	f000 fc8e 	bl	8006430 <_init>
 8005b14:	1b64      	subs	r4, r4, r5
 8005b16:	10a4      	asrs	r4, r4, #2
 8005b18:	2600      	movs	r6, #0
 8005b1a:	42a6      	cmp	r6, r4
 8005b1c:	d105      	bne.n	8005b2a <__libc_init_array+0x2e>
 8005b1e:	bd70      	pop	{r4, r5, r6, pc}
 8005b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b24:	4798      	blx	r3
 8005b26:	3601      	adds	r6, #1
 8005b28:	e7ee      	b.n	8005b08 <__libc_init_array+0xc>
 8005b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b2e:	4798      	blx	r3
 8005b30:	3601      	adds	r6, #1
 8005b32:	e7f2      	b.n	8005b1a <__libc_init_array+0x1e>
 8005b34:	080064d8 	.word	0x080064d8
 8005b38:	080064d8 	.word	0x080064d8
 8005b3c:	080064d8 	.word	0x080064d8
 8005b40:	080064dc 	.word	0x080064dc

08005b44 <memset>:
 8005b44:	4402      	add	r2, r0
 8005b46:	4603      	mov	r3, r0
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d100      	bne.n	8005b4e <memset+0xa>
 8005b4c:	4770      	bx	lr
 8005b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b52:	e7f9      	b.n	8005b48 <memset+0x4>

08005b54 <siprintf>:
 8005b54:	b40e      	push	{r1, r2, r3}
 8005b56:	b500      	push	{lr}
 8005b58:	b09c      	sub	sp, #112	; 0x70
 8005b5a:	ab1d      	add	r3, sp, #116	; 0x74
 8005b5c:	9002      	str	r0, [sp, #8]
 8005b5e:	9006      	str	r0, [sp, #24]
 8005b60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b64:	4809      	ldr	r0, [pc, #36]	; (8005b8c <siprintf+0x38>)
 8005b66:	9107      	str	r1, [sp, #28]
 8005b68:	9104      	str	r1, [sp, #16]
 8005b6a:	4909      	ldr	r1, [pc, #36]	; (8005b90 <siprintf+0x3c>)
 8005b6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b70:	9105      	str	r1, [sp, #20]
 8005b72:	6800      	ldr	r0, [r0, #0]
 8005b74:	9301      	str	r3, [sp, #4]
 8005b76:	a902      	add	r1, sp, #8
 8005b78:	f000 f868 	bl	8005c4c <_svfiprintf_r>
 8005b7c:	9b02      	ldr	r3, [sp, #8]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	701a      	strb	r2, [r3, #0]
 8005b82:	b01c      	add	sp, #112	; 0x70
 8005b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b88:	b003      	add	sp, #12
 8005b8a:	4770      	bx	lr
 8005b8c:	2000000c 	.word	0x2000000c
 8005b90:	ffff0208 	.word	0xffff0208

08005b94 <__ssputs_r>:
 8005b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b98:	688e      	ldr	r6, [r1, #8]
 8005b9a:	429e      	cmp	r6, r3
 8005b9c:	4682      	mov	sl, r0
 8005b9e:	460c      	mov	r4, r1
 8005ba0:	4690      	mov	r8, r2
 8005ba2:	461f      	mov	r7, r3
 8005ba4:	d838      	bhi.n	8005c18 <__ssputs_r+0x84>
 8005ba6:	898a      	ldrh	r2, [r1, #12]
 8005ba8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005bac:	d032      	beq.n	8005c14 <__ssputs_r+0x80>
 8005bae:	6825      	ldr	r5, [r4, #0]
 8005bb0:	6909      	ldr	r1, [r1, #16]
 8005bb2:	eba5 0901 	sub.w	r9, r5, r1
 8005bb6:	6965      	ldr	r5, [r4, #20]
 8005bb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005bbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	444b      	add	r3, r9
 8005bc4:	106d      	asrs	r5, r5, #1
 8005bc6:	429d      	cmp	r5, r3
 8005bc8:	bf38      	it	cc
 8005bca:	461d      	movcc	r5, r3
 8005bcc:	0553      	lsls	r3, r2, #21
 8005bce:	d531      	bpl.n	8005c34 <__ssputs_r+0xa0>
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	f000 fb63 	bl	800629c <_malloc_r>
 8005bd6:	4606      	mov	r6, r0
 8005bd8:	b950      	cbnz	r0, 8005bf0 <__ssputs_r+0x5c>
 8005bda:	230c      	movs	r3, #12
 8005bdc:	f8ca 3000 	str.w	r3, [sl]
 8005be0:	89a3      	ldrh	r3, [r4, #12]
 8005be2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005be6:	81a3      	strh	r3, [r4, #12]
 8005be8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bf0:	6921      	ldr	r1, [r4, #16]
 8005bf2:	464a      	mov	r2, r9
 8005bf4:	f000 fabe 	bl	8006174 <memcpy>
 8005bf8:	89a3      	ldrh	r3, [r4, #12]
 8005bfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c02:	81a3      	strh	r3, [r4, #12]
 8005c04:	6126      	str	r6, [r4, #16]
 8005c06:	6165      	str	r5, [r4, #20]
 8005c08:	444e      	add	r6, r9
 8005c0a:	eba5 0509 	sub.w	r5, r5, r9
 8005c0e:	6026      	str	r6, [r4, #0]
 8005c10:	60a5      	str	r5, [r4, #8]
 8005c12:	463e      	mov	r6, r7
 8005c14:	42be      	cmp	r6, r7
 8005c16:	d900      	bls.n	8005c1a <__ssputs_r+0x86>
 8005c18:	463e      	mov	r6, r7
 8005c1a:	6820      	ldr	r0, [r4, #0]
 8005c1c:	4632      	mov	r2, r6
 8005c1e:	4641      	mov	r1, r8
 8005c20:	f000 fab6 	bl	8006190 <memmove>
 8005c24:	68a3      	ldr	r3, [r4, #8]
 8005c26:	1b9b      	subs	r3, r3, r6
 8005c28:	60a3      	str	r3, [r4, #8]
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	4433      	add	r3, r6
 8005c2e:	6023      	str	r3, [r4, #0]
 8005c30:	2000      	movs	r0, #0
 8005c32:	e7db      	b.n	8005bec <__ssputs_r+0x58>
 8005c34:	462a      	mov	r2, r5
 8005c36:	f000 fba5 	bl	8006384 <_realloc_r>
 8005c3a:	4606      	mov	r6, r0
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	d1e1      	bne.n	8005c04 <__ssputs_r+0x70>
 8005c40:	6921      	ldr	r1, [r4, #16]
 8005c42:	4650      	mov	r0, sl
 8005c44:	f000 fabe 	bl	80061c4 <_free_r>
 8005c48:	e7c7      	b.n	8005bda <__ssputs_r+0x46>
	...

08005c4c <_svfiprintf_r>:
 8005c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c50:	4698      	mov	r8, r3
 8005c52:	898b      	ldrh	r3, [r1, #12]
 8005c54:	061b      	lsls	r3, r3, #24
 8005c56:	b09d      	sub	sp, #116	; 0x74
 8005c58:	4607      	mov	r7, r0
 8005c5a:	460d      	mov	r5, r1
 8005c5c:	4614      	mov	r4, r2
 8005c5e:	d50e      	bpl.n	8005c7e <_svfiprintf_r+0x32>
 8005c60:	690b      	ldr	r3, [r1, #16]
 8005c62:	b963      	cbnz	r3, 8005c7e <_svfiprintf_r+0x32>
 8005c64:	2140      	movs	r1, #64	; 0x40
 8005c66:	f000 fb19 	bl	800629c <_malloc_r>
 8005c6a:	6028      	str	r0, [r5, #0]
 8005c6c:	6128      	str	r0, [r5, #16]
 8005c6e:	b920      	cbnz	r0, 8005c7a <_svfiprintf_r+0x2e>
 8005c70:	230c      	movs	r3, #12
 8005c72:	603b      	str	r3, [r7, #0]
 8005c74:	f04f 30ff 	mov.w	r0, #4294967295
 8005c78:	e0d1      	b.n	8005e1e <_svfiprintf_r+0x1d2>
 8005c7a:	2340      	movs	r3, #64	; 0x40
 8005c7c:	616b      	str	r3, [r5, #20]
 8005c7e:	2300      	movs	r3, #0
 8005c80:	9309      	str	r3, [sp, #36]	; 0x24
 8005c82:	2320      	movs	r3, #32
 8005c84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c88:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c8c:	2330      	movs	r3, #48	; 0x30
 8005c8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005e38 <_svfiprintf_r+0x1ec>
 8005c92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c96:	f04f 0901 	mov.w	r9, #1
 8005c9a:	4623      	mov	r3, r4
 8005c9c:	469a      	mov	sl, r3
 8005c9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ca2:	b10a      	cbz	r2, 8005ca8 <_svfiprintf_r+0x5c>
 8005ca4:	2a25      	cmp	r2, #37	; 0x25
 8005ca6:	d1f9      	bne.n	8005c9c <_svfiprintf_r+0x50>
 8005ca8:	ebba 0b04 	subs.w	fp, sl, r4
 8005cac:	d00b      	beq.n	8005cc6 <_svfiprintf_r+0x7a>
 8005cae:	465b      	mov	r3, fp
 8005cb0:	4622      	mov	r2, r4
 8005cb2:	4629      	mov	r1, r5
 8005cb4:	4638      	mov	r0, r7
 8005cb6:	f7ff ff6d 	bl	8005b94 <__ssputs_r>
 8005cba:	3001      	adds	r0, #1
 8005cbc:	f000 80aa 	beq.w	8005e14 <_svfiprintf_r+0x1c8>
 8005cc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cc2:	445a      	add	r2, fp
 8005cc4:	9209      	str	r2, [sp, #36]	; 0x24
 8005cc6:	f89a 3000 	ldrb.w	r3, [sl]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f000 80a2 	beq.w	8005e14 <_svfiprintf_r+0x1c8>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8005cd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cda:	f10a 0a01 	add.w	sl, sl, #1
 8005cde:	9304      	str	r3, [sp, #16]
 8005ce0:	9307      	str	r3, [sp, #28]
 8005ce2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ce6:	931a      	str	r3, [sp, #104]	; 0x68
 8005ce8:	4654      	mov	r4, sl
 8005cea:	2205      	movs	r2, #5
 8005cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cf0:	4851      	ldr	r0, [pc, #324]	; (8005e38 <_svfiprintf_r+0x1ec>)
 8005cf2:	f7fa fa75 	bl	80001e0 <memchr>
 8005cf6:	9a04      	ldr	r2, [sp, #16]
 8005cf8:	b9d8      	cbnz	r0, 8005d32 <_svfiprintf_r+0xe6>
 8005cfa:	06d0      	lsls	r0, r2, #27
 8005cfc:	bf44      	itt	mi
 8005cfe:	2320      	movmi	r3, #32
 8005d00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d04:	0711      	lsls	r1, r2, #28
 8005d06:	bf44      	itt	mi
 8005d08:	232b      	movmi	r3, #43	; 0x2b
 8005d0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d0e:	f89a 3000 	ldrb.w	r3, [sl]
 8005d12:	2b2a      	cmp	r3, #42	; 0x2a
 8005d14:	d015      	beq.n	8005d42 <_svfiprintf_r+0xf6>
 8005d16:	9a07      	ldr	r2, [sp, #28]
 8005d18:	4654      	mov	r4, sl
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	f04f 0c0a 	mov.w	ip, #10
 8005d20:	4621      	mov	r1, r4
 8005d22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d26:	3b30      	subs	r3, #48	; 0x30
 8005d28:	2b09      	cmp	r3, #9
 8005d2a:	d94e      	bls.n	8005dca <_svfiprintf_r+0x17e>
 8005d2c:	b1b0      	cbz	r0, 8005d5c <_svfiprintf_r+0x110>
 8005d2e:	9207      	str	r2, [sp, #28]
 8005d30:	e014      	b.n	8005d5c <_svfiprintf_r+0x110>
 8005d32:	eba0 0308 	sub.w	r3, r0, r8
 8005d36:	fa09 f303 	lsl.w	r3, r9, r3
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	9304      	str	r3, [sp, #16]
 8005d3e:	46a2      	mov	sl, r4
 8005d40:	e7d2      	b.n	8005ce8 <_svfiprintf_r+0x9c>
 8005d42:	9b03      	ldr	r3, [sp, #12]
 8005d44:	1d19      	adds	r1, r3, #4
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	9103      	str	r1, [sp, #12]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	bfbb      	ittet	lt
 8005d4e:	425b      	neglt	r3, r3
 8005d50:	f042 0202 	orrlt.w	r2, r2, #2
 8005d54:	9307      	strge	r3, [sp, #28]
 8005d56:	9307      	strlt	r3, [sp, #28]
 8005d58:	bfb8      	it	lt
 8005d5a:	9204      	strlt	r2, [sp, #16]
 8005d5c:	7823      	ldrb	r3, [r4, #0]
 8005d5e:	2b2e      	cmp	r3, #46	; 0x2e
 8005d60:	d10c      	bne.n	8005d7c <_svfiprintf_r+0x130>
 8005d62:	7863      	ldrb	r3, [r4, #1]
 8005d64:	2b2a      	cmp	r3, #42	; 0x2a
 8005d66:	d135      	bne.n	8005dd4 <_svfiprintf_r+0x188>
 8005d68:	9b03      	ldr	r3, [sp, #12]
 8005d6a:	1d1a      	adds	r2, r3, #4
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	9203      	str	r2, [sp, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	bfb8      	it	lt
 8005d74:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d78:	3402      	adds	r4, #2
 8005d7a:	9305      	str	r3, [sp, #20]
 8005d7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005e48 <_svfiprintf_r+0x1fc>
 8005d80:	7821      	ldrb	r1, [r4, #0]
 8005d82:	2203      	movs	r2, #3
 8005d84:	4650      	mov	r0, sl
 8005d86:	f7fa fa2b 	bl	80001e0 <memchr>
 8005d8a:	b140      	cbz	r0, 8005d9e <_svfiprintf_r+0x152>
 8005d8c:	2340      	movs	r3, #64	; 0x40
 8005d8e:	eba0 000a 	sub.w	r0, r0, sl
 8005d92:	fa03 f000 	lsl.w	r0, r3, r0
 8005d96:	9b04      	ldr	r3, [sp, #16]
 8005d98:	4303      	orrs	r3, r0
 8005d9a:	3401      	adds	r4, #1
 8005d9c:	9304      	str	r3, [sp, #16]
 8005d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005da2:	4826      	ldr	r0, [pc, #152]	; (8005e3c <_svfiprintf_r+0x1f0>)
 8005da4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005da8:	2206      	movs	r2, #6
 8005daa:	f7fa fa19 	bl	80001e0 <memchr>
 8005dae:	2800      	cmp	r0, #0
 8005db0:	d038      	beq.n	8005e24 <_svfiprintf_r+0x1d8>
 8005db2:	4b23      	ldr	r3, [pc, #140]	; (8005e40 <_svfiprintf_r+0x1f4>)
 8005db4:	bb1b      	cbnz	r3, 8005dfe <_svfiprintf_r+0x1b2>
 8005db6:	9b03      	ldr	r3, [sp, #12]
 8005db8:	3307      	adds	r3, #7
 8005dba:	f023 0307 	bic.w	r3, r3, #7
 8005dbe:	3308      	adds	r3, #8
 8005dc0:	9303      	str	r3, [sp, #12]
 8005dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dc4:	4433      	add	r3, r6
 8005dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8005dc8:	e767      	b.n	8005c9a <_svfiprintf_r+0x4e>
 8005dca:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dce:	460c      	mov	r4, r1
 8005dd0:	2001      	movs	r0, #1
 8005dd2:	e7a5      	b.n	8005d20 <_svfiprintf_r+0xd4>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	3401      	adds	r4, #1
 8005dd8:	9305      	str	r3, [sp, #20]
 8005dda:	4619      	mov	r1, r3
 8005ddc:	f04f 0c0a 	mov.w	ip, #10
 8005de0:	4620      	mov	r0, r4
 8005de2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005de6:	3a30      	subs	r2, #48	; 0x30
 8005de8:	2a09      	cmp	r2, #9
 8005dea:	d903      	bls.n	8005df4 <_svfiprintf_r+0x1a8>
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d0c5      	beq.n	8005d7c <_svfiprintf_r+0x130>
 8005df0:	9105      	str	r1, [sp, #20]
 8005df2:	e7c3      	b.n	8005d7c <_svfiprintf_r+0x130>
 8005df4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005df8:	4604      	mov	r4, r0
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e7f0      	b.n	8005de0 <_svfiprintf_r+0x194>
 8005dfe:	ab03      	add	r3, sp, #12
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	462a      	mov	r2, r5
 8005e04:	4b0f      	ldr	r3, [pc, #60]	; (8005e44 <_svfiprintf_r+0x1f8>)
 8005e06:	a904      	add	r1, sp, #16
 8005e08:	4638      	mov	r0, r7
 8005e0a:	f3af 8000 	nop.w
 8005e0e:	1c42      	adds	r2, r0, #1
 8005e10:	4606      	mov	r6, r0
 8005e12:	d1d6      	bne.n	8005dc2 <_svfiprintf_r+0x176>
 8005e14:	89ab      	ldrh	r3, [r5, #12]
 8005e16:	065b      	lsls	r3, r3, #25
 8005e18:	f53f af2c 	bmi.w	8005c74 <_svfiprintf_r+0x28>
 8005e1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e1e:	b01d      	add	sp, #116	; 0x74
 8005e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e24:	ab03      	add	r3, sp, #12
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	462a      	mov	r2, r5
 8005e2a:	4b06      	ldr	r3, [pc, #24]	; (8005e44 <_svfiprintf_r+0x1f8>)
 8005e2c:	a904      	add	r1, sp, #16
 8005e2e:	4638      	mov	r0, r7
 8005e30:	f000 f87a 	bl	8005f28 <_printf_i>
 8005e34:	e7eb      	b.n	8005e0e <_svfiprintf_r+0x1c2>
 8005e36:	bf00      	nop
 8005e38:	0800649c 	.word	0x0800649c
 8005e3c:	080064a6 	.word	0x080064a6
 8005e40:	00000000 	.word	0x00000000
 8005e44:	08005b95 	.word	0x08005b95
 8005e48:	080064a2 	.word	0x080064a2

08005e4c <_printf_common>:
 8005e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e50:	4616      	mov	r6, r2
 8005e52:	4699      	mov	r9, r3
 8005e54:	688a      	ldr	r2, [r1, #8]
 8005e56:	690b      	ldr	r3, [r1, #16]
 8005e58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	bfb8      	it	lt
 8005e60:	4613      	movlt	r3, r2
 8005e62:	6033      	str	r3, [r6, #0]
 8005e64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e68:	4607      	mov	r7, r0
 8005e6a:	460c      	mov	r4, r1
 8005e6c:	b10a      	cbz	r2, 8005e72 <_printf_common+0x26>
 8005e6e:	3301      	adds	r3, #1
 8005e70:	6033      	str	r3, [r6, #0]
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	0699      	lsls	r1, r3, #26
 8005e76:	bf42      	ittt	mi
 8005e78:	6833      	ldrmi	r3, [r6, #0]
 8005e7a:	3302      	addmi	r3, #2
 8005e7c:	6033      	strmi	r3, [r6, #0]
 8005e7e:	6825      	ldr	r5, [r4, #0]
 8005e80:	f015 0506 	ands.w	r5, r5, #6
 8005e84:	d106      	bne.n	8005e94 <_printf_common+0x48>
 8005e86:	f104 0a19 	add.w	sl, r4, #25
 8005e8a:	68e3      	ldr	r3, [r4, #12]
 8005e8c:	6832      	ldr	r2, [r6, #0]
 8005e8e:	1a9b      	subs	r3, r3, r2
 8005e90:	42ab      	cmp	r3, r5
 8005e92:	dc26      	bgt.n	8005ee2 <_printf_common+0x96>
 8005e94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e98:	1e13      	subs	r3, r2, #0
 8005e9a:	6822      	ldr	r2, [r4, #0]
 8005e9c:	bf18      	it	ne
 8005e9e:	2301      	movne	r3, #1
 8005ea0:	0692      	lsls	r2, r2, #26
 8005ea2:	d42b      	bmi.n	8005efc <_printf_common+0xb0>
 8005ea4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ea8:	4649      	mov	r1, r9
 8005eaa:	4638      	mov	r0, r7
 8005eac:	47c0      	blx	r8
 8005eae:	3001      	adds	r0, #1
 8005eb0:	d01e      	beq.n	8005ef0 <_printf_common+0xa4>
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	68e5      	ldr	r5, [r4, #12]
 8005eb6:	6832      	ldr	r2, [r6, #0]
 8005eb8:	f003 0306 	and.w	r3, r3, #6
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	bf08      	it	eq
 8005ec0:	1aad      	subeq	r5, r5, r2
 8005ec2:	68a3      	ldr	r3, [r4, #8]
 8005ec4:	6922      	ldr	r2, [r4, #16]
 8005ec6:	bf0c      	ite	eq
 8005ec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ecc:	2500      	movne	r5, #0
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	bfc4      	itt	gt
 8005ed2:	1a9b      	subgt	r3, r3, r2
 8005ed4:	18ed      	addgt	r5, r5, r3
 8005ed6:	2600      	movs	r6, #0
 8005ed8:	341a      	adds	r4, #26
 8005eda:	42b5      	cmp	r5, r6
 8005edc:	d11a      	bne.n	8005f14 <_printf_common+0xc8>
 8005ede:	2000      	movs	r0, #0
 8005ee0:	e008      	b.n	8005ef4 <_printf_common+0xa8>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	4652      	mov	r2, sl
 8005ee6:	4649      	mov	r1, r9
 8005ee8:	4638      	mov	r0, r7
 8005eea:	47c0      	blx	r8
 8005eec:	3001      	adds	r0, #1
 8005eee:	d103      	bne.n	8005ef8 <_printf_common+0xac>
 8005ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ef8:	3501      	adds	r5, #1
 8005efa:	e7c6      	b.n	8005e8a <_printf_common+0x3e>
 8005efc:	18e1      	adds	r1, r4, r3
 8005efe:	1c5a      	adds	r2, r3, #1
 8005f00:	2030      	movs	r0, #48	; 0x30
 8005f02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f06:	4422      	add	r2, r4
 8005f08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f10:	3302      	adds	r3, #2
 8005f12:	e7c7      	b.n	8005ea4 <_printf_common+0x58>
 8005f14:	2301      	movs	r3, #1
 8005f16:	4622      	mov	r2, r4
 8005f18:	4649      	mov	r1, r9
 8005f1a:	4638      	mov	r0, r7
 8005f1c:	47c0      	blx	r8
 8005f1e:	3001      	adds	r0, #1
 8005f20:	d0e6      	beq.n	8005ef0 <_printf_common+0xa4>
 8005f22:	3601      	adds	r6, #1
 8005f24:	e7d9      	b.n	8005eda <_printf_common+0x8e>
	...

08005f28 <_printf_i>:
 8005f28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f2c:	7e0f      	ldrb	r7, [r1, #24]
 8005f2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f30:	2f78      	cmp	r7, #120	; 0x78
 8005f32:	4691      	mov	r9, r2
 8005f34:	4680      	mov	r8, r0
 8005f36:	460c      	mov	r4, r1
 8005f38:	469a      	mov	sl, r3
 8005f3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f3e:	d807      	bhi.n	8005f50 <_printf_i+0x28>
 8005f40:	2f62      	cmp	r7, #98	; 0x62
 8005f42:	d80a      	bhi.n	8005f5a <_printf_i+0x32>
 8005f44:	2f00      	cmp	r7, #0
 8005f46:	f000 80d8 	beq.w	80060fa <_printf_i+0x1d2>
 8005f4a:	2f58      	cmp	r7, #88	; 0x58
 8005f4c:	f000 80a3 	beq.w	8006096 <_printf_i+0x16e>
 8005f50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f58:	e03a      	b.n	8005fd0 <_printf_i+0xa8>
 8005f5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f5e:	2b15      	cmp	r3, #21
 8005f60:	d8f6      	bhi.n	8005f50 <_printf_i+0x28>
 8005f62:	a101      	add	r1, pc, #4	; (adr r1, 8005f68 <_printf_i+0x40>)
 8005f64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f68:	08005fc1 	.word	0x08005fc1
 8005f6c:	08005fd5 	.word	0x08005fd5
 8005f70:	08005f51 	.word	0x08005f51
 8005f74:	08005f51 	.word	0x08005f51
 8005f78:	08005f51 	.word	0x08005f51
 8005f7c:	08005f51 	.word	0x08005f51
 8005f80:	08005fd5 	.word	0x08005fd5
 8005f84:	08005f51 	.word	0x08005f51
 8005f88:	08005f51 	.word	0x08005f51
 8005f8c:	08005f51 	.word	0x08005f51
 8005f90:	08005f51 	.word	0x08005f51
 8005f94:	080060e1 	.word	0x080060e1
 8005f98:	08006005 	.word	0x08006005
 8005f9c:	080060c3 	.word	0x080060c3
 8005fa0:	08005f51 	.word	0x08005f51
 8005fa4:	08005f51 	.word	0x08005f51
 8005fa8:	08006103 	.word	0x08006103
 8005fac:	08005f51 	.word	0x08005f51
 8005fb0:	08006005 	.word	0x08006005
 8005fb4:	08005f51 	.word	0x08005f51
 8005fb8:	08005f51 	.word	0x08005f51
 8005fbc:	080060cb 	.word	0x080060cb
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	1d1a      	adds	r2, r3, #4
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	602a      	str	r2, [r5, #0]
 8005fc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e0a3      	b.n	800611c <_printf_i+0x1f4>
 8005fd4:	6820      	ldr	r0, [r4, #0]
 8005fd6:	6829      	ldr	r1, [r5, #0]
 8005fd8:	0606      	lsls	r6, r0, #24
 8005fda:	f101 0304 	add.w	r3, r1, #4
 8005fde:	d50a      	bpl.n	8005ff6 <_printf_i+0xce>
 8005fe0:	680e      	ldr	r6, [r1, #0]
 8005fe2:	602b      	str	r3, [r5, #0]
 8005fe4:	2e00      	cmp	r6, #0
 8005fe6:	da03      	bge.n	8005ff0 <_printf_i+0xc8>
 8005fe8:	232d      	movs	r3, #45	; 0x2d
 8005fea:	4276      	negs	r6, r6
 8005fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ff0:	485e      	ldr	r0, [pc, #376]	; (800616c <_printf_i+0x244>)
 8005ff2:	230a      	movs	r3, #10
 8005ff4:	e019      	b.n	800602a <_printf_i+0x102>
 8005ff6:	680e      	ldr	r6, [r1, #0]
 8005ff8:	602b      	str	r3, [r5, #0]
 8005ffa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ffe:	bf18      	it	ne
 8006000:	b236      	sxthne	r6, r6
 8006002:	e7ef      	b.n	8005fe4 <_printf_i+0xbc>
 8006004:	682b      	ldr	r3, [r5, #0]
 8006006:	6820      	ldr	r0, [r4, #0]
 8006008:	1d19      	adds	r1, r3, #4
 800600a:	6029      	str	r1, [r5, #0]
 800600c:	0601      	lsls	r1, r0, #24
 800600e:	d501      	bpl.n	8006014 <_printf_i+0xec>
 8006010:	681e      	ldr	r6, [r3, #0]
 8006012:	e002      	b.n	800601a <_printf_i+0xf2>
 8006014:	0646      	lsls	r6, r0, #25
 8006016:	d5fb      	bpl.n	8006010 <_printf_i+0xe8>
 8006018:	881e      	ldrh	r6, [r3, #0]
 800601a:	4854      	ldr	r0, [pc, #336]	; (800616c <_printf_i+0x244>)
 800601c:	2f6f      	cmp	r7, #111	; 0x6f
 800601e:	bf0c      	ite	eq
 8006020:	2308      	moveq	r3, #8
 8006022:	230a      	movne	r3, #10
 8006024:	2100      	movs	r1, #0
 8006026:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800602a:	6865      	ldr	r5, [r4, #4]
 800602c:	60a5      	str	r5, [r4, #8]
 800602e:	2d00      	cmp	r5, #0
 8006030:	bfa2      	ittt	ge
 8006032:	6821      	ldrge	r1, [r4, #0]
 8006034:	f021 0104 	bicge.w	r1, r1, #4
 8006038:	6021      	strge	r1, [r4, #0]
 800603a:	b90e      	cbnz	r6, 8006040 <_printf_i+0x118>
 800603c:	2d00      	cmp	r5, #0
 800603e:	d04d      	beq.n	80060dc <_printf_i+0x1b4>
 8006040:	4615      	mov	r5, r2
 8006042:	fbb6 f1f3 	udiv	r1, r6, r3
 8006046:	fb03 6711 	mls	r7, r3, r1, r6
 800604a:	5dc7      	ldrb	r7, [r0, r7]
 800604c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006050:	4637      	mov	r7, r6
 8006052:	42bb      	cmp	r3, r7
 8006054:	460e      	mov	r6, r1
 8006056:	d9f4      	bls.n	8006042 <_printf_i+0x11a>
 8006058:	2b08      	cmp	r3, #8
 800605a:	d10b      	bne.n	8006074 <_printf_i+0x14c>
 800605c:	6823      	ldr	r3, [r4, #0]
 800605e:	07de      	lsls	r6, r3, #31
 8006060:	d508      	bpl.n	8006074 <_printf_i+0x14c>
 8006062:	6923      	ldr	r3, [r4, #16]
 8006064:	6861      	ldr	r1, [r4, #4]
 8006066:	4299      	cmp	r1, r3
 8006068:	bfde      	ittt	le
 800606a:	2330      	movle	r3, #48	; 0x30
 800606c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006070:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006074:	1b52      	subs	r2, r2, r5
 8006076:	6122      	str	r2, [r4, #16]
 8006078:	f8cd a000 	str.w	sl, [sp]
 800607c:	464b      	mov	r3, r9
 800607e:	aa03      	add	r2, sp, #12
 8006080:	4621      	mov	r1, r4
 8006082:	4640      	mov	r0, r8
 8006084:	f7ff fee2 	bl	8005e4c <_printf_common>
 8006088:	3001      	adds	r0, #1
 800608a:	d14c      	bne.n	8006126 <_printf_i+0x1fe>
 800608c:	f04f 30ff 	mov.w	r0, #4294967295
 8006090:	b004      	add	sp, #16
 8006092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006096:	4835      	ldr	r0, [pc, #212]	; (800616c <_printf_i+0x244>)
 8006098:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800609c:	6829      	ldr	r1, [r5, #0]
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80060a4:	6029      	str	r1, [r5, #0]
 80060a6:	061d      	lsls	r5, r3, #24
 80060a8:	d514      	bpl.n	80060d4 <_printf_i+0x1ac>
 80060aa:	07df      	lsls	r7, r3, #31
 80060ac:	bf44      	itt	mi
 80060ae:	f043 0320 	orrmi.w	r3, r3, #32
 80060b2:	6023      	strmi	r3, [r4, #0]
 80060b4:	b91e      	cbnz	r6, 80060be <_printf_i+0x196>
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	f023 0320 	bic.w	r3, r3, #32
 80060bc:	6023      	str	r3, [r4, #0]
 80060be:	2310      	movs	r3, #16
 80060c0:	e7b0      	b.n	8006024 <_printf_i+0xfc>
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	f043 0320 	orr.w	r3, r3, #32
 80060c8:	6023      	str	r3, [r4, #0]
 80060ca:	2378      	movs	r3, #120	; 0x78
 80060cc:	4828      	ldr	r0, [pc, #160]	; (8006170 <_printf_i+0x248>)
 80060ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060d2:	e7e3      	b.n	800609c <_printf_i+0x174>
 80060d4:	0659      	lsls	r1, r3, #25
 80060d6:	bf48      	it	mi
 80060d8:	b2b6      	uxthmi	r6, r6
 80060da:	e7e6      	b.n	80060aa <_printf_i+0x182>
 80060dc:	4615      	mov	r5, r2
 80060de:	e7bb      	b.n	8006058 <_printf_i+0x130>
 80060e0:	682b      	ldr	r3, [r5, #0]
 80060e2:	6826      	ldr	r6, [r4, #0]
 80060e4:	6961      	ldr	r1, [r4, #20]
 80060e6:	1d18      	adds	r0, r3, #4
 80060e8:	6028      	str	r0, [r5, #0]
 80060ea:	0635      	lsls	r5, r6, #24
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	d501      	bpl.n	80060f4 <_printf_i+0x1cc>
 80060f0:	6019      	str	r1, [r3, #0]
 80060f2:	e002      	b.n	80060fa <_printf_i+0x1d2>
 80060f4:	0670      	lsls	r0, r6, #25
 80060f6:	d5fb      	bpl.n	80060f0 <_printf_i+0x1c8>
 80060f8:	8019      	strh	r1, [r3, #0]
 80060fa:	2300      	movs	r3, #0
 80060fc:	6123      	str	r3, [r4, #16]
 80060fe:	4615      	mov	r5, r2
 8006100:	e7ba      	b.n	8006078 <_printf_i+0x150>
 8006102:	682b      	ldr	r3, [r5, #0]
 8006104:	1d1a      	adds	r2, r3, #4
 8006106:	602a      	str	r2, [r5, #0]
 8006108:	681d      	ldr	r5, [r3, #0]
 800610a:	6862      	ldr	r2, [r4, #4]
 800610c:	2100      	movs	r1, #0
 800610e:	4628      	mov	r0, r5
 8006110:	f7fa f866 	bl	80001e0 <memchr>
 8006114:	b108      	cbz	r0, 800611a <_printf_i+0x1f2>
 8006116:	1b40      	subs	r0, r0, r5
 8006118:	6060      	str	r0, [r4, #4]
 800611a:	6863      	ldr	r3, [r4, #4]
 800611c:	6123      	str	r3, [r4, #16]
 800611e:	2300      	movs	r3, #0
 8006120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006124:	e7a8      	b.n	8006078 <_printf_i+0x150>
 8006126:	6923      	ldr	r3, [r4, #16]
 8006128:	462a      	mov	r2, r5
 800612a:	4649      	mov	r1, r9
 800612c:	4640      	mov	r0, r8
 800612e:	47d0      	blx	sl
 8006130:	3001      	adds	r0, #1
 8006132:	d0ab      	beq.n	800608c <_printf_i+0x164>
 8006134:	6823      	ldr	r3, [r4, #0]
 8006136:	079b      	lsls	r3, r3, #30
 8006138:	d413      	bmi.n	8006162 <_printf_i+0x23a>
 800613a:	68e0      	ldr	r0, [r4, #12]
 800613c:	9b03      	ldr	r3, [sp, #12]
 800613e:	4298      	cmp	r0, r3
 8006140:	bfb8      	it	lt
 8006142:	4618      	movlt	r0, r3
 8006144:	e7a4      	b.n	8006090 <_printf_i+0x168>
 8006146:	2301      	movs	r3, #1
 8006148:	4632      	mov	r2, r6
 800614a:	4649      	mov	r1, r9
 800614c:	4640      	mov	r0, r8
 800614e:	47d0      	blx	sl
 8006150:	3001      	adds	r0, #1
 8006152:	d09b      	beq.n	800608c <_printf_i+0x164>
 8006154:	3501      	adds	r5, #1
 8006156:	68e3      	ldr	r3, [r4, #12]
 8006158:	9903      	ldr	r1, [sp, #12]
 800615a:	1a5b      	subs	r3, r3, r1
 800615c:	42ab      	cmp	r3, r5
 800615e:	dcf2      	bgt.n	8006146 <_printf_i+0x21e>
 8006160:	e7eb      	b.n	800613a <_printf_i+0x212>
 8006162:	2500      	movs	r5, #0
 8006164:	f104 0619 	add.w	r6, r4, #25
 8006168:	e7f5      	b.n	8006156 <_printf_i+0x22e>
 800616a:	bf00      	nop
 800616c:	080064ad 	.word	0x080064ad
 8006170:	080064be 	.word	0x080064be

08006174 <memcpy>:
 8006174:	440a      	add	r2, r1
 8006176:	4291      	cmp	r1, r2
 8006178:	f100 33ff 	add.w	r3, r0, #4294967295
 800617c:	d100      	bne.n	8006180 <memcpy+0xc>
 800617e:	4770      	bx	lr
 8006180:	b510      	push	{r4, lr}
 8006182:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006186:	f803 4f01 	strb.w	r4, [r3, #1]!
 800618a:	4291      	cmp	r1, r2
 800618c:	d1f9      	bne.n	8006182 <memcpy+0xe>
 800618e:	bd10      	pop	{r4, pc}

08006190 <memmove>:
 8006190:	4288      	cmp	r0, r1
 8006192:	b510      	push	{r4, lr}
 8006194:	eb01 0402 	add.w	r4, r1, r2
 8006198:	d902      	bls.n	80061a0 <memmove+0x10>
 800619a:	4284      	cmp	r4, r0
 800619c:	4623      	mov	r3, r4
 800619e:	d807      	bhi.n	80061b0 <memmove+0x20>
 80061a0:	1e43      	subs	r3, r0, #1
 80061a2:	42a1      	cmp	r1, r4
 80061a4:	d008      	beq.n	80061b8 <memmove+0x28>
 80061a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061ae:	e7f8      	b.n	80061a2 <memmove+0x12>
 80061b0:	4402      	add	r2, r0
 80061b2:	4601      	mov	r1, r0
 80061b4:	428a      	cmp	r2, r1
 80061b6:	d100      	bne.n	80061ba <memmove+0x2a>
 80061b8:	bd10      	pop	{r4, pc}
 80061ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061c2:	e7f7      	b.n	80061b4 <memmove+0x24>

080061c4 <_free_r>:
 80061c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061c6:	2900      	cmp	r1, #0
 80061c8:	d044      	beq.n	8006254 <_free_r+0x90>
 80061ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061ce:	9001      	str	r0, [sp, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f1a1 0404 	sub.w	r4, r1, #4
 80061d6:	bfb8      	it	lt
 80061d8:	18e4      	addlt	r4, r4, r3
 80061da:	f000 f913 	bl	8006404 <__malloc_lock>
 80061de:	4a1e      	ldr	r2, [pc, #120]	; (8006258 <_free_r+0x94>)
 80061e0:	9801      	ldr	r0, [sp, #4]
 80061e2:	6813      	ldr	r3, [r2, #0]
 80061e4:	b933      	cbnz	r3, 80061f4 <_free_r+0x30>
 80061e6:	6063      	str	r3, [r4, #4]
 80061e8:	6014      	str	r4, [r2, #0]
 80061ea:	b003      	add	sp, #12
 80061ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061f0:	f000 b90e 	b.w	8006410 <__malloc_unlock>
 80061f4:	42a3      	cmp	r3, r4
 80061f6:	d908      	bls.n	800620a <_free_r+0x46>
 80061f8:	6825      	ldr	r5, [r4, #0]
 80061fa:	1961      	adds	r1, r4, r5
 80061fc:	428b      	cmp	r3, r1
 80061fe:	bf01      	itttt	eq
 8006200:	6819      	ldreq	r1, [r3, #0]
 8006202:	685b      	ldreq	r3, [r3, #4]
 8006204:	1949      	addeq	r1, r1, r5
 8006206:	6021      	streq	r1, [r4, #0]
 8006208:	e7ed      	b.n	80061e6 <_free_r+0x22>
 800620a:	461a      	mov	r2, r3
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	b10b      	cbz	r3, 8006214 <_free_r+0x50>
 8006210:	42a3      	cmp	r3, r4
 8006212:	d9fa      	bls.n	800620a <_free_r+0x46>
 8006214:	6811      	ldr	r1, [r2, #0]
 8006216:	1855      	adds	r5, r2, r1
 8006218:	42a5      	cmp	r5, r4
 800621a:	d10b      	bne.n	8006234 <_free_r+0x70>
 800621c:	6824      	ldr	r4, [r4, #0]
 800621e:	4421      	add	r1, r4
 8006220:	1854      	adds	r4, r2, r1
 8006222:	42a3      	cmp	r3, r4
 8006224:	6011      	str	r1, [r2, #0]
 8006226:	d1e0      	bne.n	80061ea <_free_r+0x26>
 8006228:	681c      	ldr	r4, [r3, #0]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	6053      	str	r3, [r2, #4]
 800622e:	4421      	add	r1, r4
 8006230:	6011      	str	r1, [r2, #0]
 8006232:	e7da      	b.n	80061ea <_free_r+0x26>
 8006234:	d902      	bls.n	800623c <_free_r+0x78>
 8006236:	230c      	movs	r3, #12
 8006238:	6003      	str	r3, [r0, #0]
 800623a:	e7d6      	b.n	80061ea <_free_r+0x26>
 800623c:	6825      	ldr	r5, [r4, #0]
 800623e:	1961      	adds	r1, r4, r5
 8006240:	428b      	cmp	r3, r1
 8006242:	bf04      	itt	eq
 8006244:	6819      	ldreq	r1, [r3, #0]
 8006246:	685b      	ldreq	r3, [r3, #4]
 8006248:	6063      	str	r3, [r4, #4]
 800624a:	bf04      	itt	eq
 800624c:	1949      	addeq	r1, r1, r5
 800624e:	6021      	streq	r1, [r4, #0]
 8006250:	6054      	str	r4, [r2, #4]
 8006252:	e7ca      	b.n	80061ea <_free_r+0x26>
 8006254:	b003      	add	sp, #12
 8006256:	bd30      	pop	{r4, r5, pc}
 8006258:	20000318 	.word	0x20000318

0800625c <sbrk_aligned>:
 800625c:	b570      	push	{r4, r5, r6, lr}
 800625e:	4e0e      	ldr	r6, [pc, #56]	; (8006298 <sbrk_aligned+0x3c>)
 8006260:	460c      	mov	r4, r1
 8006262:	6831      	ldr	r1, [r6, #0]
 8006264:	4605      	mov	r5, r0
 8006266:	b911      	cbnz	r1, 800626e <sbrk_aligned+0x12>
 8006268:	f000 f8bc 	bl	80063e4 <_sbrk_r>
 800626c:	6030      	str	r0, [r6, #0]
 800626e:	4621      	mov	r1, r4
 8006270:	4628      	mov	r0, r5
 8006272:	f000 f8b7 	bl	80063e4 <_sbrk_r>
 8006276:	1c43      	adds	r3, r0, #1
 8006278:	d00a      	beq.n	8006290 <sbrk_aligned+0x34>
 800627a:	1cc4      	adds	r4, r0, #3
 800627c:	f024 0403 	bic.w	r4, r4, #3
 8006280:	42a0      	cmp	r0, r4
 8006282:	d007      	beq.n	8006294 <sbrk_aligned+0x38>
 8006284:	1a21      	subs	r1, r4, r0
 8006286:	4628      	mov	r0, r5
 8006288:	f000 f8ac 	bl	80063e4 <_sbrk_r>
 800628c:	3001      	adds	r0, #1
 800628e:	d101      	bne.n	8006294 <sbrk_aligned+0x38>
 8006290:	f04f 34ff 	mov.w	r4, #4294967295
 8006294:	4620      	mov	r0, r4
 8006296:	bd70      	pop	{r4, r5, r6, pc}
 8006298:	2000031c 	.word	0x2000031c

0800629c <_malloc_r>:
 800629c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062a0:	1ccd      	adds	r5, r1, #3
 80062a2:	f025 0503 	bic.w	r5, r5, #3
 80062a6:	3508      	adds	r5, #8
 80062a8:	2d0c      	cmp	r5, #12
 80062aa:	bf38      	it	cc
 80062ac:	250c      	movcc	r5, #12
 80062ae:	2d00      	cmp	r5, #0
 80062b0:	4607      	mov	r7, r0
 80062b2:	db01      	blt.n	80062b8 <_malloc_r+0x1c>
 80062b4:	42a9      	cmp	r1, r5
 80062b6:	d905      	bls.n	80062c4 <_malloc_r+0x28>
 80062b8:	230c      	movs	r3, #12
 80062ba:	603b      	str	r3, [r7, #0]
 80062bc:	2600      	movs	r6, #0
 80062be:	4630      	mov	r0, r6
 80062c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062c4:	4e2e      	ldr	r6, [pc, #184]	; (8006380 <_malloc_r+0xe4>)
 80062c6:	f000 f89d 	bl	8006404 <__malloc_lock>
 80062ca:	6833      	ldr	r3, [r6, #0]
 80062cc:	461c      	mov	r4, r3
 80062ce:	bb34      	cbnz	r4, 800631e <_malloc_r+0x82>
 80062d0:	4629      	mov	r1, r5
 80062d2:	4638      	mov	r0, r7
 80062d4:	f7ff ffc2 	bl	800625c <sbrk_aligned>
 80062d8:	1c43      	adds	r3, r0, #1
 80062da:	4604      	mov	r4, r0
 80062dc:	d14d      	bne.n	800637a <_malloc_r+0xde>
 80062de:	6834      	ldr	r4, [r6, #0]
 80062e0:	4626      	mov	r6, r4
 80062e2:	2e00      	cmp	r6, #0
 80062e4:	d140      	bne.n	8006368 <_malloc_r+0xcc>
 80062e6:	6823      	ldr	r3, [r4, #0]
 80062e8:	4631      	mov	r1, r6
 80062ea:	4638      	mov	r0, r7
 80062ec:	eb04 0803 	add.w	r8, r4, r3
 80062f0:	f000 f878 	bl	80063e4 <_sbrk_r>
 80062f4:	4580      	cmp	r8, r0
 80062f6:	d13a      	bne.n	800636e <_malloc_r+0xd2>
 80062f8:	6821      	ldr	r1, [r4, #0]
 80062fa:	3503      	adds	r5, #3
 80062fc:	1a6d      	subs	r5, r5, r1
 80062fe:	f025 0503 	bic.w	r5, r5, #3
 8006302:	3508      	adds	r5, #8
 8006304:	2d0c      	cmp	r5, #12
 8006306:	bf38      	it	cc
 8006308:	250c      	movcc	r5, #12
 800630a:	4629      	mov	r1, r5
 800630c:	4638      	mov	r0, r7
 800630e:	f7ff ffa5 	bl	800625c <sbrk_aligned>
 8006312:	3001      	adds	r0, #1
 8006314:	d02b      	beq.n	800636e <_malloc_r+0xd2>
 8006316:	6823      	ldr	r3, [r4, #0]
 8006318:	442b      	add	r3, r5
 800631a:	6023      	str	r3, [r4, #0]
 800631c:	e00e      	b.n	800633c <_malloc_r+0xa0>
 800631e:	6822      	ldr	r2, [r4, #0]
 8006320:	1b52      	subs	r2, r2, r5
 8006322:	d41e      	bmi.n	8006362 <_malloc_r+0xc6>
 8006324:	2a0b      	cmp	r2, #11
 8006326:	d916      	bls.n	8006356 <_malloc_r+0xba>
 8006328:	1961      	adds	r1, r4, r5
 800632a:	42a3      	cmp	r3, r4
 800632c:	6025      	str	r5, [r4, #0]
 800632e:	bf18      	it	ne
 8006330:	6059      	strne	r1, [r3, #4]
 8006332:	6863      	ldr	r3, [r4, #4]
 8006334:	bf08      	it	eq
 8006336:	6031      	streq	r1, [r6, #0]
 8006338:	5162      	str	r2, [r4, r5]
 800633a:	604b      	str	r3, [r1, #4]
 800633c:	4638      	mov	r0, r7
 800633e:	f104 060b 	add.w	r6, r4, #11
 8006342:	f000 f865 	bl	8006410 <__malloc_unlock>
 8006346:	f026 0607 	bic.w	r6, r6, #7
 800634a:	1d23      	adds	r3, r4, #4
 800634c:	1af2      	subs	r2, r6, r3
 800634e:	d0b6      	beq.n	80062be <_malloc_r+0x22>
 8006350:	1b9b      	subs	r3, r3, r6
 8006352:	50a3      	str	r3, [r4, r2]
 8006354:	e7b3      	b.n	80062be <_malloc_r+0x22>
 8006356:	6862      	ldr	r2, [r4, #4]
 8006358:	42a3      	cmp	r3, r4
 800635a:	bf0c      	ite	eq
 800635c:	6032      	streq	r2, [r6, #0]
 800635e:	605a      	strne	r2, [r3, #4]
 8006360:	e7ec      	b.n	800633c <_malloc_r+0xa0>
 8006362:	4623      	mov	r3, r4
 8006364:	6864      	ldr	r4, [r4, #4]
 8006366:	e7b2      	b.n	80062ce <_malloc_r+0x32>
 8006368:	4634      	mov	r4, r6
 800636a:	6876      	ldr	r6, [r6, #4]
 800636c:	e7b9      	b.n	80062e2 <_malloc_r+0x46>
 800636e:	230c      	movs	r3, #12
 8006370:	603b      	str	r3, [r7, #0]
 8006372:	4638      	mov	r0, r7
 8006374:	f000 f84c 	bl	8006410 <__malloc_unlock>
 8006378:	e7a1      	b.n	80062be <_malloc_r+0x22>
 800637a:	6025      	str	r5, [r4, #0]
 800637c:	e7de      	b.n	800633c <_malloc_r+0xa0>
 800637e:	bf00      	nop
 8006380:	20000318 	.word	0x20000318

08006384 <_realloc_r>:
 8006384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006388:	4680      	mov	r8, r0
 800638a:	4614      	mov	r4, r2
 800638c:	460e      	mov	r6, r1
 800638e:	b921      	cbnz	r1, 800639a <_realloc_r+0x16>
 8006390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006394:	4611      	mov	r1, r2
 8006396:	f7ff bf81 	b.w	800629c <_malloc_r>
 800639a:	b92a      	cbnz	r2, 80063a8 <_realloc_r+0x24>
 800639c:	f7ff ff12 	bl	80061c4 <_free_r>
 80063a0:	4625      	mov	r5, r4
 80063a2:	4628      	mov	r0, r5
 80063a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063a8:	f000 f838 	bl	800641c <_malloc_usable_size_r>
 80063ac:	4284      	cmp	r4, r0
 80063ae:	4607      	mov	r7, r0
 80063b0:	d802      	bhi.n	80063b8 <_realloc_r+0x34>
 80063b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80063b6:	d812      	bhi.n	80063de <_realloc_r+0x5a>
 80063b8:	4621      	mov	r1, r4
 80063ba:	4640      	mov	r0, r8
 80063bc:	f7ff ff6e 	bl	800629c <_malloc_r>
 80063c0:	4605      	mov	r5, r0
 80063c2:	2800      	cmp	r0, #0
 80063c4:	d0ed      	beq.n	80063a2 <_realloc_r+0x1e>
 80063c6:	42bc      	cmp	r4, r7
 80063c8:	4622      	mov	r2, r4
 80063ca:	4631      	mov	r1, r6
 80063cc:	bf28      	it	cs
 80063ce:	463a      	movcs	r2, r7
 80063d0:	f7ff fed0 	bl	8006174 <memcpy>
 80063d4:	4631      	mov	r1, r6
 80063d6:	4640      	mov	r0, r8
 80063d8:	f7ff fef4 	bl	80061c4 <_free_r>
 80063dc:	e7e1      	b.n	80063a2 <_realloc_r+0x1e>
 80063de:	4635      	mov	r5, r6
 80063e0:	e7df      	b.n	80063a2 <_realloc_r+0x1e>
	...

080063e4 <_sbrk_r>:
 80063e4:	b538      	push	{r3, r4, r5, lr}
 80063e6:	4d06      	ldr	r5, [pc, #24]	; (8006400 <_sbrk_r+0x1c>)
 80063e8:	2300      	movs	r3, #0
 80063ea:	4604      	mov	r4, r0
 80063ec:	4608      	mov	r0, r1
 80063ee:	602b      	str	r3, [r5, #0]
 80063f0:	f7fb fcb2 	bl	8001d58 <_sbrk>
 80063f4:	1c43      	adds	r3, r0, #1
 80063f6:	d102      	bne.n	80063fe <_sbrk_r+0x1a>
 80063f8:	682b      	ldr	r3, [r5, #0]
 80063fa:	b103      	cbz	r3, 80063fe <_sbrk_r+0x1a>
 80063fc:	6023      	str	r3, [r4, #0]
 80063fe:	bd38      	pop	{r3, r4, r5, pc}
 8006400:	20000320 	.word	0x20000320

08006404 <__malloc_lock>:
 8006404:	4801      	ldr	r0, [pc, #4]	; (800640c <__malloc_lock+0x8>)
 8006406:	f000 b811 	b.w	800642c <__retarget_lock_acquire_recursive>
 800640a:	bf00      	nop
 800640c:	20000324 	.word	0x20000324

08006410 <__malloc_unlock>:
 8006410:	4801      	ldr	r0, [pc, #4]	; (8006418 <__malloc_unlock+0x8>)
 8006412:	f000 b80c 	b.w	800642e <__retarget_lock_release_recursive>
 8006416:	bf00      	nop
 8006418:	20000324 	.word	0x20000324

0800641c <_malloc_usable_size_r>:
 800641c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006420:	1f18      	subs	r0, r3, #4
 8006422:	2b00      	cmp	r3, #0
 8006424:	bfbc      	itt	lt
 8006426:	580b      	ldrlt	r3, [r1, r0]
 8006428:	18c0      	addlt	r0, r0, r3
 800642a:	4770      	bx	lr

0800642c <__retarget_lock_acquire_recursive>:
 800642c:	4770      	bx	lr

0800642e <__retarget_lock_release_recursive>:
 800642e:	4770      	bx	lr

08006430 <_init>:
 8006430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006432:	bf00      	nop
 8006434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006436:	bc08      	pop	{r3}
 8006438:	469e      	mov	lr, r3
 800643a:	4770      	bx	lr

0800643c <_fini>:
 800643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643e:	bf00      	nop
 8006440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006442:	bc08      	pop	{r3}
 8006444:	469e      	mov	lr, r3
 8006446:	4770      	bx	lr
